use strict;
use Cwd;
use Data::Dumper;
use File::Find;

my ($projectName, $majVer, $minVer);
my (@makeVarContent, @content, @allProjectNames);
my $projectRootName = $ARGV[0];
my $installMode = $ARGV[1]; # 0: remove & install all (include, lib, doc)
                            # 1: remove & install include, lib
                            # 2: remove & install doc
                            # 3: remove & install as link include, lib

#------------------
#Get version number
#------------------
open(FILE,"./makeVar") or die "Can not open file: $!";
@content = <FILE>;
close(FILE);

foreach my $line(@content) {
    if ($line =~ /^TARGET_MAJVERSION:= (\d+)/) {
        $majVer = $1;
    }
    
    if ($line =~ /^TARGET_MINVERSION:= (\d+)/) {
        $minVer = $1;
    }   
}

#---------------------------
#Walk through directory tree
#---------------------------
opendir(DIR,"./") or die "Can not open DIR: $!";
my @dirs = grep { /ICL/ } readdir(DIR);
closedir(DIR);

my $INSTALLDIR="$ENV{AGNI_LOCAL_ROOT}/${projectRootName}/${majVer}.${minVer}";
my $OS_SYSTEM="$ENV{ARCH}";
my $currDir=&Cwd::cwd();

#---- Remove old install tree before installing the new one ----
if ($installMode == 0 || $installMode == 1 || $installMode == 3) {
    print "---- Remove header files in: $INSTALLDIR/include \n";
    system "rm -Rf $INSTALLDIR/include/*.h";
    print "---- Remove libraries in: $INSTALLDIR/lib \n";
    system "rm -Rf $INSTALLDIR/lib/*";
    print "---- Remove packages in: $INSTALLDIR/packages \n";
    system "rm -Rf $INSTALLDIR/packages/*";
}

if ($installMode == 0 || $installMode == 2) {
    print "---- Remove docs in: $INSTALLDIR/doc \n";
    system "rm -Rf $INSTALLDIR/doc/*";
}

#---- Create install tree ----
if (!-e "$INSTALLDIR"){
    print "make dir: $INSTALLDIR\n";
    system "mkdir -p $INSTALLDIR";
    }

if (!-e "$INSTALLDIR/lib"){
    print "make dir: $INSTALLDIR/lib\n";
    system "mkdir -p $INSTALLDIR/lib";
    }

if (!-e "$INSTALLDIR/include"){
    print "make dir: $INSTALLDIR/include\n";
    system "mkdir -p $INSTALLDIR/include";
    }

if (!-e "$INSTALLDIR/packages"){
    print "make dir: $INSTALLDIR/packages\n";
    system "mkdir -p $INSTALLDIR/packages";
}

if (!-e "$INSTALLDIR/lib/pkgconfig"){
    print "make dir: $INSTALLDIR/lib/pkgconfig\n";
    system "mkdir -p $INSTALLDIR/lib/pkgconfig";
}

if (!-e "$INSTALLDIR/make"){
    print "make dir: $INSTALLDIR/make\n";
    system "mkdir -p $INSTALLDIR/make";
}

if (!-e "$INSTALLDIR/doc"){
    print "make dir: $INSTALLDIR/doc\n";
    system "mkdir -p $INSTALLDIR/doc";
}

#---- Copy extern projects files----
system "cp ./packages/IPP $INSTALLDIR/packages";
system "cp ./packages/Qt $INSTALLDIR/packages";
system "cp ./packages/Unicap $INSTALLDIR/packages";
system "cp ./packages/XCF $INSTALLDIR/packages";
system "cp ./packages/Firewire $INSTALLDIR/packages";
system "cp ./make/dependencyChecks $INSTALLDIR/make";

foreach my $entry(@dirs) {
    #---- Check makeVar for inlcudes ----
    if ($entry !~ /ICLUtils/) {
        open(FILE,"./$entry/makeVar") or die "Can not open file: $!";
        @makeVarContent = <FILE>;
        close(FILE);
    }
    
    my @includes = ();
    foreach my $line(@makeVarContent) {
        if ($line =~ /^include/) {
            push(@includes, $line);
        }
    }
    
    # ---- Install content ----
    if ($installMode == 0 || $installMode == 1) { 
        print "---- Copying header files: $entry/src\n";
        system "cp ./$entry/src/*.h $INSTALLDIR/include";
        
        if ($entry !~ /ICLUtils/) {
            print "---- Copying libraries: $entry/lib\n";
            if ("$OS_SYSTEM" eq "macosx") {
                system "cp -d ./$entry/lib/*.dylib $INSTALLDIR/lib";
                system "cp -d ./$entry/lib/*.a $INSTALLDIR/lib";
            } else {
                system "cp -d ./$entry/lib/*.so* $INSTALLDIR/lib";
                system "cp -d ./$entry/lib/*.a $INSTALLDIR/lib";
            }
        }
    }
    
    # ---- remove & install as link include, lib ----
    if ($installMode == 3) {
        print "---- Linking header files: $entry/src\n";
        system "ln -s $currDir/$entry/src/*.h $INSTALLDIR/include";
        
        if ($entry !~ /ICLUtils/) {
            print "---- Linking libraries: $entry/lib\n";
            if ("$OS_SYSTEM" eq "macosx") {
                system "ln -s $currDir/$entry/lib/*.dylib $INSTALLDIR/lib";
                system "ln -s $currDir/$entry/lib/*.a $INSTALLDIR/lib";
            } else {
                system "ln -s $currDir/$entry/lib/*.so* $INSTALLDIR/lib";
                system "ln -s $currDir/$entry/lib/*.a $INSTALLDIR/lib";
            }
        }
    }
    
    if ($installMode == 0 || $installMode == 2) {
        print "---- Copying documentation: $entry/doc\n";
        system "cp -r ./$entry/doc/documentation/* $INSTALLDIR/doc/$entry";
        
    }
    
    if ($installMode == 0 || $installMode == 2) {
        generate_documentation($INSTALLDIR, @dirs);
    }

    generate_packagevar($entry, $INSTALLDIR, @includes);
    generate_pkgconfig($entry, $INSTALLDIR, @includes);
}

#---------------------
# Remove all .svn dirs
#---------------------
system "find $INSTALLDIR -name '.svn' -exec rm -Rf {} \\; 2> /dev/null";

exit(0);


#----------------------------------------------------------------------------- 
sub generate_documentation {
# {{{ open

    my ($INSTALLDIR, @projects) = @_;
    my $menuTable = "";
    
    #---- Copy static documentation files ----
    system "mkdir -p $INSTALLDIR/doc/html";
    system "cp -r ./doc/html/* $INSTALLDIR/doc/html";
    
    #---- Generate menu content ----
    @projects = sort(@projects);
    $menuTable .= "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n";
    $menuTable .= "<html>\n";
    $menuTable .= "<head>\n";
    $menuTable .= "<meta http-equiv=\"Content-Language\" content=\"de\">\n";
    $menuTable .= "<meta http-equiv=\"Content-Type\"\n";
    $menuTable .= "content=\"text/html; charset=windows-1252\">\n";
    $menuTable .= "<title>Menu</title>\n";
    $menuTable .= "<base target=\"Inhalt\">\n";
    $menuTable .= "</head>\n";
    $menuTable .= "<body>\n";
    $menuTable .= "<div align=\"center\">\n";
    $menuTable .= "<table border=\"0\" width=\"100%\" id=\"table1\" bgcolor=\"#C0C0C0\" cellspacing=\"1\" cellpadding=\"0\">\n";
    $menuTable .= "<tr>\n";
    $menuTable .= "<td>\n";
    $menuTable .= "<div align=\"center\">\n";
    $menuTable .= "<table border=\"0\" width=\"100%\" id=\"table2\" bgcolor=\"#C0C0C0\" cellspacing=\"4\" cellpadding=\"0\"\n";
    $menuTable .= "<tr>\n";
    $menuTable .= "<td>\n";
    $menuTable .= "<p align=\"center\"><font color=\"#000080\"><u><b>Main menu</b></u>\n";
    $menuTable .= "</td>\n";
    $menuTable .= "</tr>\n";

    foreach my $project (@projects) {
        $menuTable .= "<tr><td> <a href=\"../".$project."/index.html\" target=\"MainFrame\">".$project."</a></td>\n";
    }

    $menuTable .= "</table>\n";
    $menuTable .= "<br>\n";
    $menuTable .= "</body>\n";
    $menuTable .= "</html>\n";
    
    #---- Write menu.html ----
    open(FILE, ">$INSTALLDIR/doc/html/menu.html") or die "cannot write to menu.html:$!";
    print FILE $menuTable;
    close(FILE);
}
# }}}

sub generate_packagevar {
# {{{ open

    my ($entry, $installdir, @includes) = @_;
    my $pkgContent = "";
    my $ersion = $installdir;

    #---- Generate content ----
    $pkgContent .= "#   packageVar\n";
    $pkgContent .= "ifeq \"\${".$entry."_MAKEVAR}\" \"\"\n";
    $pkgContent .= $entry."_MAKEVAR=".$entry."_MAKEVAR\n";
    $pkgContent .= "\n";
    $pkgContent .= "# Please include here the inherited packages123\n";
    foreach my $inc (@includes) {
        $inc =~ s/\$\{PACKAGES\}/$installdir\/packages/;
        $pkgContent .= $inc;
    }
    $pkgContent .= "\n";    
    $pkgContent .= "# Please, place here the include directory of the project\n";
    $pkgContent .= "ABS_INCLUDES:= \${ABS_INCLUDES} \\\n";
    $pkgContent .= "-I$installdir/include\n";
    $pkgContent .= "\n";
    $pkgContent .= "# Please, do not change this ifeq statement\n";
    $pkgContent .= "ifeq \"\${AGNI_INHERIT_MODE}\" \"STATIC\"\n";
    $pkgContent .= "\n";
    $pkgContent .= "\n";
    $pkgContent .= "# Please, place here the static libraries\n";
    $pkgContent .= "ABS_OBJECTS:= \${ABS_OBJECTS} \\\n";
    $pkgContent .= "$installdir/lib/lib".$entry.".a\n";
    $pkgContent .= "\n";
    $pkgContent .= "else\n";
    $pkgContent .= "\n";
    $pkgContent .= "\n";
    $pkgContent .= "# Please, place here the lib directory of the project and the library name.\n";
    $pkgContent .= "ABS_LIBRARIES:= \${ABS_LIBRARIES} \\\n";
    $pkgContent .= "-L".$installdir."/lib -l".$entry." -Wl,-rpath=".$installdir."/lib\n";
    $pkgContent .= "\n";
    $pkgContent .= "endif\n";
    $pkgContent .= "endif\n";

    #---- Write packagevar ----
    open(FILE, ">$INSTALLDIR/packages/$entry") or die "cannot write packageVar:$!";
    print FILE $pkgContent;
    close(FILE);
}
# }}}

sub generate_pkgconfig {
# {{{ open
    
    my ($entry, $installdir, @includes) = @_;
    my ($pkgContent, $requiredList);
    my @dirContent;
    $installdir =~ /^.*\/(\d*.\d*)/;
    my $version = $1;

    foreach my $inc (@includes) {
        $inc =~ /^.*}\/(.*)/;
        $requiredList .= $1." ";
    }
    
    #---- Generate content ----
    $pkgContent .= "# This is the pkg-config file for: $entry\n";
    $pkgContent .= "prefix=$installdir\n";
    $pkgContent .= "\n";
    $pkgContent .= "Name: $entry\n";    
    $pkgContent .= "Version: $version\n";
    $pkgContent .= "Requires: $requiredList\n";
    $pkgContent .= "Libs: -L\${prefix}/lib -l$entry\n";
    $pkgContent .= "Cflags: -I\${prefix}/include\n";

    #---- Write pkg-config file ----
    open(FILE, ">$INSTALLDIR/lib/pkgconfig/$entry.pc") or die "cannot write pkgconfig file:$!";
    print FILE $pkgContent;
    close(FILE);
}

# }}}
