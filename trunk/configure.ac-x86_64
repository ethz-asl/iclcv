#                                              -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.61)
AC_INIT([ICL],[4.4.0],[celbrech@techfak.uni-bielefeld.de])
#AM_INIT_AUTOMAKE([-Wall -Werror foreign])
AM_INIT_AUTOMAKE([foreign])

# PACKAGE_DESCRIPTION... Image Component Library [[ICL]] (a C++ computer vision library

echo -n "checking system architecture..."
ARCH=`./config.guess | cut -f 3 -d '-' | tr [[:lower:]] [[:upper:]]`
if test "$ARCH" = "DARWIN" ; then
   ARCH=APPLE
elif test "$ARCH" = "CYGWIN" ; then
   ARCH=LINUX
fi
echo " $ARCH (adding -DSYSTEM_$ARCH to CXXFLAGS)"

CXXFLAGS="$CXXFLAGS -Isrc -I../src -DSYSTEM_${ARCH} -Wno-long-long -Wall"

LDFLAGS="$LDFLAGS -lpthread"
ICL_EXTEND_PC_FLAGS([],[-DSYSTEM_${ARCH}],[])

#linux: -D SYSTEM_LINUX
#macosx -D SYSTEM_APPLE
#windows -D SYSTEM_WINDOWS


AM_CONDITIONAL([SYSTEM_LINUX_COND],[test x$ARCH = xLINUX])
AM_CONDITIONAL([SYSTEM_APPLE_COND],[test x$ARCH = xAPPLE])

AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_HEADER([ICLUtils/src/config.h])       

# Checks for programs.
AC_PROG_CXX
AC_PROG_LIBTOOL
AC_PROG_SED
AC_CHECK_PROG([HAVE_PKG_CONFIG],[pkg-config],[TRUE],[FALSE])
if test "$HAVE_PKG_CONFIG" = "FALSE" ; then
AC_MSG_ERROR([unable to find 'pkg-config' in PATH (please install and/or adapt path variable])
fi


###############################################################################
# ICL 
###############################################################################

AC_ARG_WITH([IPP],
        [AS_HELP_STRING([--without-IPP],
                        [disable support for IPP])],
        [HAVE_IPP=FALSE],
        [ICL_NOTIFY_CHECK([IPP           ])
        ICL_WITH_ROOT([IPP],[/vol/nivision/IPP/6.0])

        HAVE_IPP=TRUE
        ICL_PUSH_FLAG_VARS
        ICL_EXTEND_FLAG_VARS_TMP_FOR([IPP],[sharedlib],[include])
        
        AC_CHECK_HEADER([ipp.h],[],[HAVE_IPP=FALSE],[])
        AC_CHECK_LIB([ippcoreem64t],[ippGetLibVersion],[],[HAVE_IPP=FALSE],[-lpthread])
        AC_CHECK_LIB([ippiem64t],[ippiGetLibVersion],[],[HAVE_IPP=FALSE],[-lpthread])
        AC_CHECK_LIB([ippsem64t],[ippsGetLibVersion],[],[HAVE_IPP=FALSE],[-lpthread])
        AC_CHECK_LIB([ippsrem64t],[ippsrGetLibVersion],[],[HAVE_IPP=FALSE],[-lpthread])
        AC_CHECK_LIB([ippcvem64t],[ippcvGetLibVersion],[],[HAVE_IPP=FALSE],[-lpthread])
        AC_CHECK_LIB([ippmem64t],[ippmGetLibVersion],[],[HAVE_IPP=FALSE],[-lpthread])
        AC_CHECK_LIB([ippccem64t],[ippccGetLibVersion],[],[HAVE_IPP=FALSE],[-lpthread])
        AC_CHECK_LIB([guide],[main],[],[HAVE_IPP=FALSE],[-lpthread])
        
        ICL_POP_FLAG_VARS

        if test "$HAVE_IPP" = "TRUE" ; then

        ICL_EXTEND_FLAG_VARS_2(
                [IPP],
                [-L$IPP_ROOT/sharedlib -lippcoreem64t -lippiem64t -lippsem64t -lippsrem64t -lippcvem64t -lippmem64t -lippccem64t -lguide -lpthread],
                [-Wl,-rpath=${IPP_ROOT}/sharedlib],
                [-I$IPP_ROOT/include],
                [-DHAVE_IPP],
                [],
                [])
        fi])
AM_CONDITIONAL([HAVE_IPP_COND],[test x$HAVE_IPP = xTRUE])



###############################################################################
# LIBDC
###############################################################################

AC_ARG_WITH([LIBDC],
        [AS_HELP_STRING([--without-LIBDC],
                        [disable support for LIBDC])],
        [HAVE_LIBDC=FALSE],
        [ICL_NOTIFY_CHECK([libdc1394-2   ])
        ICL_WITH_ROOT([LIBDC],[/usr])
        HAVE_LIBDC=TRUE

        ICL_PUSH_FLAG_VARS
        ICL_EXTEND_FLAG_VARS_TMP_FOR(LIBDC,lib,include)
        AC_CHECK_FILE([$LIBDC_ROOT/lib/pkgconfig/libdc1394-2.pc],[],[HAVE_LIBDC=FALSE])  
        AC_CHECK_HEADER([dc1394/dc1394.h],[],[HAVE_LIBDC=FALSE])
        AC_CHECK_LIB([dc1394],[dc1394_camera_enumerate],[],[HAVE_LIBDC=FALSE])

        ICL_POP_FLAG_VARS

        if test "$HAVE_LIBDC" = "TRUE" ; then
           ICL_USE_PC_INPUT([LIBDC],[libdc1394-2])
        fi])
AM_CONDITIONAL([HAVE_LIBDC_COND],[test x$HAVE_LIBDC = xTRUE])



###############################################################################
# OpenGL
###############################################################################

AC_ARG_WITH([OPENGL],
        [AS_HELP_STRING([--without-OPENGL],
                        [disable support for OPENGL])],
        [HAVE_OPENGL=FALSE],
        [ICL_NOTIFY_CHECK([OpenGL        ])
        ICL_WITH_ROOT([OPENGL],[/usr])
        HAVE_OPENGL=TRUE

        ICL_PUSH_FLAG_VARS

        ICL_EXTEND_FLAG_VARS_TMP_FOR(OPENGL,lib,include)
        AC_CHECK_HEADER([GL/gl.h],[],[HAVE_OPENGL=FALSE])
        AC_CHECK_HEADER([GL/glu.h],[],[HAVE_OPENGL=FALSE])
        AC_CHECK_LIB([GL],[glBegin],[],[HAVE_OPENGL=FALSE])
        AC_CHECK_LIB([GLU],[gluLookAt],[],[HAVE_OPENGL=FALSE])

        ICL_POP_FLAG_VARS

        if test "$HAVE_OPENGL" = "TRUE" ; then
           ICL_EXTEND_FLAG_VARS_2(
                [OPENGL],
                [-L$OPENGL_ROOT/lib -lGL -lGLU],
                [-Wl,-rpath=${OPENGL_ROOT}/lib],
                [-I$OPENGL_ROOT/include],
                [-DHAVE_OPENGL],
                [],
                [])
        fi])
AM_CONDITIONAL([HAVE_OPENGL_COND],[test x$HAVE_OPEN = xTRUE])



###############################################################################
# Unicap
###############################################################################

AC_ARG_WITH([UNICAP],
        [AS_HELP_STRING([--without-UNICAP],
                        [disable support for UNICAP])],
        [HAVE_UNICAP=FALSE],
        [ICL_NOTIFY_CHECK([Unicap        ])
        ICL_WITH_ROOT([UNICAP],[/usr])
        HAVE_UNICAP=TRUE

        ICL_PUSH_FLAG_VARS
        ICL_EXTEND_FLAG_VARS_TMP_FOR(UNICAP,lib,include/unicap)                
        
        AC_CHECK_HEADER([unicap.h],[],[HAVE_UNICAP=FALSE])
        AC_CHECK_LIB([unicap],[unicap_check_version],[],[HAVE_UNICAP=FALSE])

        ICL_POP_FLAG_VARS

        if test "$HAVE_UNICAP" = "TRUE" ; then
           ICL_USE_PC_INPUT([UNICAP],[libunicap])

           # for compatibility with new Ubuntu hardy unicap version (0.9.3)
           CPPFLAGS="$CPPFLAGS -DUNICAP_FLAGS_NOT_AS_ENUM"
           CXXCPP="$CXXCPP -DUNICAP_FLAGS_NOT_AS_ENUM"
           ICL_EXTEND_PC_FLAGS([],[-DUNICAP_FLAGS_NOT_AS_ENUM],[])
        fi])
AM_CONDITIONAL([HAVE_UNICAP_COND],[test x$HAVE_UNICAP = xTRUE])




###############################################################################
# Image Magick
###############################################################################

AC_ARG_WITH([IMAGEMAGICK],
        [AS_HELP_STRING([--without-IMAGEMAGICK],
                        [disable support for IMAGEMAGICK])],
        [HAVE_IMAGEMAGICK=FALSE],
        [ICL_NOTIFY_CHECK([Magick++      ])
        ICL_WITH_ROOT([IMAGEMAGICK],[/usr])

        HAVE_IMAGEMAGICK=TRUE
        ICL_PUSH_FLAG_VARS
        ICL_EXTEND_FLAG_VARS_TMP_FOR(IMAGEMAGICK,lib,include)                
        
        AC_LANG([C++])
        AC_CHECK_HEADER([Magick++.h],[],[HAVE_IMAGEMAGICK=FALSE])
        AC_CHECK_LIB([Magick++],[InitializeMagick],[],[HAVE_IMAGEMAGICK=FALSE])

        ICL_POP_FLAG_VARS

        if test "$HAVE_IMAGEMAGICK" = "TRUE" ; then
           ICL_EXTEND_FLAG_VARS_2(
                [IMAGEMAGICK],
                [-L$IMAGEMAGICK_ROOT/lib -lMagick++],
                [-Wl,-rpath=$IMAGEMGAGICK_ROOT/lib],
                [-I$IMAGEMAGICK_ROOT/include],
                [-DHAVE_IMAGEMAGICK],
                [],
                [])
        fi])             
AM_CONDITIONAL([HAVE_IMAGEMAGICK_COND],[test x$HAVE_IMAGEMAGICK = xTRUE])


###############################################################################
# LIBJPEG
###############################################################################

AC_ARG_WITH([LIBJPEG],
        [AS_HELP_STRING([--without-LIBJPEG],
                        [disable support for LIBJPEG])],
        [HAVE_LIBJPEG=FALSE],
        [ICL_NOTIFY_CHECK([libjpeg       ])
        ICL_WITH_ROOT([LIBJPEG],[/usr])
        
        HAVE_LIBJPEG=TRUE
        ICL_PUSH_FLAG_VARS
        ICL_EXTEND_FLAG_VARS_TMP_FOR(LIBJPEG,lib,include)                
        
        AC_LANG([C++])
        AC_CHECK_HEADER([jpeglib.h],[],[HAVE_LIBJPEG=FALSE])
        AC_CHECK_LIB([jpeg],[jpeg_std_error],[],[HAVE_LIBJPEG=FALSE])

        ICL_POP_FLAG_VARS

        if test "$HAVE_LIBJPEG" = "TRUE" ; then
           ICL_EXTEND_FLAG_VARS_2(
                [LIBJPEG],
                [-L$LIBJPEG_ROOT/lib -ljpeg],
                [-Wl,-rpath=$LIBJPEG_ROOT/lib],
                [-I$LIBJPEG_ROOT/include],
                [-DHAVE_LIBJPEG],
                [],
                [])
        fi])

AM_CONDITIONAL([HAVE_LIBJPEG_COND],[test x$HAVE_LIBJPEG = xTRUE])




###############################################################################
# LIBZ
###############################################################################

AC_ARG_WITH([LIBZ],
        [AS_HELP_STRING([--without-LIBZ],
                        [disable support for LIBZ])],
        [HAVE_LIBZ=FALSE],
        [ICL_NOTIFY_CHECK([libz          ])
        ICL_WITH_ROOT([LIBZ],[/usr])
        
        HAVE_LIBZ=TRUE
        ICL_PUSH_FLAG_VARS
        ICL_EXTEND_FLAG_VARS_TMP_FOR(LIBZ,lib,include)                
        
        AC_LANG([C++])
        AC_CHECK_HEADER([zlib.h],[],[HAVE_LIBZ=FALSE])
        AC_CHECK_LIB([z],[zlibVersion],[],[HAVE_LIBZ=FALSE])

        ICL_POP_FLAG_VARS

        if test "$HAVE_LIBZ" = "TRUE" ; then
           ICL_EXTEND_FLAG_VARS_2(
                [LIBZ],
                [-L$LIBZ_ROOT/lib -lz],
                [-Wl,-rpath=$LIBZ_ROOT/lib],
                [-I$LIBZ_ROOT/include],
                [-DHAVE_LIBZ],
                [],
                [])
        fi])
AM_CONDITIONAL([HAVE_LIBZ_COND],[test x$HAVE_LIBZ = xTRUE])

###############################################################################
# VIDEODEV
###############################################################################

AC_ARG_WITH([VIDEODEV],
        [AS_HELP_STRING([--without-VIDEODEV],
                        [disable support for VIDEODEV])],
        [HAVE_VIDEODEV=FALSE],
        [ICL_NOTIFY_CHECK([videodev       ])
        ICL_WITH_ROOT([VIDEODEV],[/usr])
        HAVE_VIDEODEV=TRUE

        ICL_PUSH_FLAG_VARS
        ICL_EXTEND_FLAG_VARS_TMP_FOR(VIDEODEV,lib,include)                
        
        AC_LANG([C++])
        AC_CHECK_HEADER([linux/videodev.h],[],[HAVE_VIDEODEV=FALSE])
        AC_CHECK_HEADER([sys/ioctl.h],[],[HAVE_VIDEODEV=FALSE])
        AC_CHECK_HEADER([sys/mman.h],[],[HAVE_VIDEODEV=FALSE])
        AC_CHECK_HEADER([fcntl.h],[],[HAVE_VIDEODEV=FALSE])

        ICL_POP_FLAG_VARS

        if test "$HAVE_VIDEODEV" = "TRUE" ; then
           ICL_EXTEND_FLAG_VARS_2(
            [VIDEODEV],
            [],
            [],
            [-I$VIDEODEV_ROOT/include],
            [-DHAVE_VIDEODEV],
            [],
            [])
        fi])
AM_CONDITIONAL([HAVE_VIDEODEV_COND],[test x$HAVE_VIDEODEV = xTRUE])


###############################################################################
# SVS
###############################################################################

AC_ARG_WITH([SVS],
        [AS_HELP_STRING([--without-SVS],
                        [disable support for SVS])],
        [HAVE_SVS=FALSE],
        [ICL_NOTIFY_CHECK([SVS           ])
        ICL_WITH_ROOT([SVS],[/usr])
        HAVE_SVS=TRUE

        ICL_PUSH_FLAG_VARS
        ICL_EXTEND_FLAG_VARS_TMP_FOR(SVS,bin,src)                
        
        AC_LANG([C])
        AC_CHECK_HEADER([svs.h],[],[HAVE_SVS=FALSE])
        AC_CHECK_LIB([svs],[svsEngineVersion],[],[HAVE_SVS=FALSE],[-lsvscalc])
        AC_CHECK_LIB([svscalc],[main],[],[HAVE_SVS=FALSE],[-lsvs])

        ICL_POP_FLAG_VARS

        if test "$HAVE_SVS" = "TRUE" ; then
           ICL_EXTEND_FLAG_VARS_2(
                [SVS],
                [-L$SVS_ROOT/bin -lsvs -lsvscalc],
                [-Wl,-rpath=$SVS_ROOT/bin],
                [-I$SVS_ROOT/src],
                [-DHAVE_SVS],
                [],
                [])
        fi])
AM_CONDITIONAL([HAVE_SVS_COND],[test x$HAVE_SVS = xTRUE])
                                     


###############################################################################
# Qt
###############################################################################

AC_ARG_WITH([QT],
        [AS_HELP_STRING([--without-QT],
                        [disable support for QT])],
        [HAVE_QT=FALSE],
        [ICL_NOTIFY_CHECK([Qt            ])
        ICL_WITH_ROOT([QT],[/usr])
        
        HAVE_QT=TRUE
        ICL_PUSH_FLAG_VARS
        ICL_EXTEND_FLAG_VARS_TMP_FOR(QT,lib/,include/qt4)                
        
        AC_LANG([C++])

        AC_CHECK_FILE([$QT_ROOT/lib/pkgconfig/QtCore.pc],[],[HAVE_QT=FALSE])
        AC_CHECK_FILE([$QT_ROOT/lib/pkgconfig/QtOpenGL.pc],[],[HAVE_QT=FALSE])
        AC_CHECK_FILE([$QT_ROOT/lib/pkgconfig/QtGui.pc],[],[HAVE_QT=FALSE])
        AC_CHECK_FILE([$QT_ROOT/lib/pkgconfig/QtXml.pc],[],[HAVE_QT=FALSE])

        QT_PACKAGES="QtCore QtOpenGL QtGui QtXml"

        ICL_USE_PC_INPUT([QT],[$QT_PACKAGES])

        # otherwise Qt presence becomes not TRUE
        CPPFLAGS="$CPPFLAGS $ICL_QT_CXXFLAGS"
        QT_MOC=`pkg-config --variable=moc_location QtCore`
        AC_SUBST([QT_MOC])

        AC_CHECK_LIB([GLU],[gluLookAt],[],[HAVE_QT=FALSE])
        AC_CHECK_HEADER([GL/glu.h],[],[HAVE_QT=FALSE])

        AC_CHECK_HEADER([QtCore],[],[HAVE_QT=FALSE])
        AC_CHECK_HEADER([QtGui],[],[HAVE_QT=FALSE])
        AC_CHECK_HEADER([QtOpenGL],[],[HAVE_QT=FALSE])
        AC_CHECK_HEADER([QtXml],[],[HAVE_QT=FALSE])
        AC_CHECK_LIB([QtCore],[main],[],[HAVE_QT=FALSE])
        AC_CHECK_LIB([QtGui],[main],[],[HAVE_QT=FALSE])
        AC_CHECK_LIB([QtOpenGL],[main],[],[HAVE_QT=FALSE])
        AC_CHECK_LIB([QtXml],[main],[],[HAVE_QT=FALSE])

        ICL_EXTEND_FLAG_VARS_2([],[-lGLU],[],[],[],[],[])

        if test "$HAVE_QT" = "FALSE" ; then
           ICL_POP_FLAG_VARS  
        fi])
AM_CONDITIONAL([HAVE_QT_COND],[test x$HAVE_QT = xTRUE])

###############################################################################
# XCF
###############################################################################

AC_ARG_WITH([XCF],
        [AS_HELP_STRING([--without-XCF],
                        [disable support for XCF])],
        [HAVE_XCF=FALSE],
        [ICL_NOTIFY_CHECK([XCF           ])
        ICL_WITH_ROOT([XCF],[/vol/xcf])

        HAVE_XCF=TRUE
        ICL_PUSH_FLAG_VARS
        ICL_EXTEND_FLAG_VARS_TMP_FOR(XCF,lib/,include/)                
        
        AC_LANG([C++])

        XCF_PACKAGES="xcf xmltio Memory"
        AC_CHECK_FILE([$XCF_ROOT/lib/pkgconfig/xcf.pc],[],[HAVE_XCF=FALSE])
        AC_CHECK_FILE([$XCF_ROOT/lib/pkgconfig/xmltio.pc],[],[HAVE_XCF=FALSE])
        AC_CHECK_FILE([$XCF_ROOT/lib/pkgconfig/Memory.pc],[],[HAVE_XCF=FALSE])

        ICL_USE_PC_INPUT(XCF,$XCF_PACKAGES)

        AC_CHECK_HEADER([xcf/xcf.hpp],[],[HAVE_XCF=FALSE])
        AC_CHECK_HEADER([xmltio/xmltio.hpp],[],[HAVE_XCF=FALSE])
        AC_CHECK_LIB([xcf],[main],[],[HAVE_XCF=FALSE])
        AC_CHECK_LIB([xmltio],[main],[],[HAVE_XCF=FALSE])

        if test "$HAVE_XCF" = "FALSE" ; then
           ICL_POP_FLAG_VARS
        fi])
AM_CONDITIONAL([HAVE_XCF_COND],[test x$HAVE_XCF = xTRUE])

###############################################################################
## removing default pathes /include /usr/include /lib /usr/lib ################
###############################################################################

LIBS=`echo ${LIBS} | sed "s|-L/usr/lib | |g"`
LIBS=`echo ${LIBS} | sed "s|-L/lib | |g"`

echo LDFLAGS before:
echo $LDFLAGS

LDFLAGS=`echo ${LDFLAGS} | sed "s|-Wl,-rpath=/usr/lib | |g"`
LDFLAGS=`echo ${LDFLAGS} | sed "s|-Wl,-rpath=/lib | |g"`
echo ""
echo LDFLAGS cleaned:
echo $LDFLAGS

CXXFLAGS=`echo ${CXXFLAGS} | sed "s|-I/usr/include | |g"`
CXXFLAGS=`echo ${CXXFLAGS} | sed "s|-I/include | |g"`

ICL_PC_LIBS=`echo ${ICL_PC_LIBS} | sed "s|-L/usr/lib | |g"`
ICL_PC_LIBS=`echo ${ICL_PC_LIBS} | sed "s|-L/lib | |g"`
ICL_PC_LIBS=`echo ${ICL_PC_LIBS} | sed "s|-Wl,-rpath=/usr/lib | |g"`
ICL_PC_LIBS=`echo ${ICL_PC_LIBS} | sed "s|-Wl,-rpath=/lib | |g"`

ICL_PC_CFLAGS=`echo ${ICL_PC_CFLAGS} | sed "s|-I/usr/include | |g"`
ICL_PC_CFLAGS=`echo ${ICL_PC_CFLAGS} | sed "s|-I/include | |g"`


###############################################################################
## Summary ...                        #########################################
###############################################################################

AC_MSG_NOTICE([+---------------------------------------+])
AC_MSG_NOTICE([| Summary                               |])
AC_MSG_NOTICE([+---------------------------------------+])
ICL_NOTIFY_SUPPORT([IPP],          [IPP      ])
ICL_NOTIFY_SUPPORT([LIBDC],        [libdc1394])
ICL_NOTIFY_SUPPORT([UNICAP],       [Unicap   ])
ICL_NOTIFY_SUPPORT([OPENGL],       [OpenGL   ])
ICL_NOTIFY_SUPPORT([QT],           [Qt       ])
ICL_NOTIFY_SUPPORT([LIBJPEG],      [libjpeg  ])
ICL_NOTIFY_SUPPORT([LIBZ],         [libz     ])
ICL_NOTIFY_SUPPORT([VIDEODEV],     [videodev ])
ICL_NOTIFY_SUPPORT([SVS],          [SVS      ])
ICL_NOTIFY_SUPPORT([XCF],          [XCF      ])
ICL_NOTIFY_SUPPORT([IMAGEMAGICK],  [Magick++ ])
AC_MSG_NOTICE([+---------------------------------------+])


# create list of packages to build (in correct order)
ICL_BUILD_PACKAGES="ICLUtils ICLCore ICLCC ICLIO \
ICLBlob ICLFilter ICLQuick ICLGeom ICLAlgorithms"
# later we have also: ICLGeom ICLAlgorithms And SVS

# add some dependent packages
ICL_ADD_PACKAGE_IF([ICLQt],["$HAVE_QT" = "TRUE"])

for T in $ICL_BUILD_PACKAGES ; do
    ICL_BUILD_SUBDIRS="$ICL_BUILD_SUBDIRS $T/lib"
    ICL_BUILD_DOCDIRS="$ICL_BUILD_DOCDIRS $T"
    ICL_DOC_MAKEFILES_DIST="$ICL_DOC_MAKEFILES_DIST $T/Makefile.am $T/Makefile.in"
    ICL_PC_LIBS="-l$T $ICL_PC_LIBS"
done
for T in $ICL_BUILD_PACKAGES ; do
    ICL_BUILD_SUBDIRS="$ICL_BUILD_SUBDIRS $T/bin"
done

# substituted variables become visible in Makefile.am's
AC_SUBST([ICL_BUILD_PACKAGES])
AC_SUBST([ICL_BUILD_SUBDIRS])
AC_SUBST([ICL_BUILD_DOCDIRS])
AC_SUBST([ICL_MAKEFILE_LIST])
AC_SUBST([ICL_DOC_MAKEFILES_DIST])

echo "Build Subdirs are: - $ICL_BUILD_SUBDIRS -"

echo "creating package config file: \"icl.pc\""
# creating package config file

AC_DEFUN([ICL_PC_ENTRY],[echo "$1" >> icl.pc])
AC_DEFUN([ICL_PC_ENTRY_FOR_ROOT],[
if test "$HAVE_$1" = "TRUE" ; then
   ICL_PC_ENTRY([$1_ROOT=$$1_ROOT])
   PC_CONFIG_PACKAGE_LIST="$PC_CONFIG_PACKAGE_LIST $1"
else
   ICL_PC_ENTRY([$1_ROOT=DISABLED])
fi])
rm -rf icl.pc



ICL_PC_ENTRY([prefix=${prefix}])
ICL_PC_ENTRY([exec_prefix=\${prefix}])
ICL_PC_ENTRY([bindir=\${prefix}/bin])
ICL_PC_ENTRY([libdir=\${prefix}/lib])
ICL_PC_ENTRY([datadir\${prefix}/data])
ICL_PC_ENTRY([includedir=\${prefix}/include])
ICL_PC_ENTRY([package=$PACKAGE])
ICL_PC_ENTRY([])
ICL_PC_ENTRY_FOR_ROOT([IPP])
ICL_PC_ENTRY_FOR_ROOT([LIBDC])
ICL_PC_ENTRY_FOR_ROOT([UNICAP])
ICL_PC_ENTRY_FOR_ROOT([OPENGL])
ICL_PC_ENTRY_FOR_ROOT([QT])
ICL_PC_ENTRY_FOR_ROOT([LIBJPEG])
ICL_PC_ENTRY_FOR_ROOT([VIDEODEV])
ICL_PC_ENTRY_FOR_ROOT([LIBZ])
ICL_PC_ENTRY_FOR_ROOT([SVS])
ICL_PC_ENTRY_FOR_ROOT([XCF])
ICL_PC_ENTRY_FOR_ROOT([IMAGEMAGICK])
ICL_PC_ENTRY(CONFIG_LIST=$PC_CONFIG_PACKAGE_LIST)
ICL_PC_ENTRY([])
ICL_PC_ENTRY([Name: $PACKAGE])
ICL_PC_ENTRY([Description: $PACKAGE_DESCRIPTION])
ICL_PC_ENTRY([Version: $PACKAGE_VERSION])
ICL_PC_ENTRY([])
ICL_PC_ENTRY([Requires:$ICL_PC_REQ])
ICL_PC_ENTRY([])
ICL_PC_ENTRY([Libs: -L${libdir} -Wl,-rpath=${libdir} $ICL_PC_LIBS])
ICL_PC_ENTRY([])
ICL_PC_ENTRY([Cflags: -I${includedir} $ICL_PC_CFLAGS])


# make autoconf create makefile 
# note: this macros is not able to work with variables,
#       so all makefiles must be added here manually

AC_DEFUN([ICL_CONFIG_FILES_FOR_PACKAGE],
[AC_CONFIG_FILES([$1/Makefile $1/lib/Makefile:$1/Makefile.lib.in $1/bin/Makefile:$1/Makefile.bin.in])])

AC_CONFIG_FILES([Makefile])
ICL_CONFIG_FILES_FOR_PACKAGE([ICLUtils])
ICL_CONFIG_FILES_FOR_PACKAGE([ICLCore])
ICL_CONFIG_FILES_FOR_PACKAGE([ICLCC])
ICL_CONFIG_FILES_FOR_PACKAGE([ICLIO])
ICL_CONFIG_FILES_FOR_PACKAGE([ICLBlob])
ICL_CONFIG_FILES_FOR_PACKAGE([ICLFilter])
ICL_CONFIG_FILES_FOR_PACKAGE([ICLQt])
ICL_CONFIG_FILES_FOR_PACKAGE([ICLQuick])
ICL_CONFIG_FILES_FOR_PACKAGE([ICLGeom])
ICL_CONFIG_FILES_FOR_PACKAGE([ICLAlgorithms])

AC_OUTPUT

