CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(ICL)
#ubuntu version
set(ICL_MAJOR "5")
set(ICL_MINOR "0")
set(ICL_PATCH "3")
set(VERSION "${ICL_MAJOR}.${ICL_MINOR}.${ICL_PATCH}")
cmake_policy(SET CMP0002 OLD)
#SET(CMAKE_VERBOSE_MAKEFILE ON)

SET(CMAKE_BUILD_TYPE "Release")
if(${CMAKE_BUILD_TYPE} STREQUAL "Release" OR ${CMAKE_BUILD_TYPE} STREQUAL "")
SET(CMAKE_CXX_FLAGS "-O4 -funroll-loops -march=native")
else()
SET(CMAKE_CXX_FLAGS "-Wall -O0 -g3")
SET(CMAKE_BUILD_TYPE "Debug")
endif()
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")

set(ICL_INSTALL_PREFIX "/temp/ICL${VERSION}")
set(CMAKE_INSTALL_PREFIX "${ICL_INSTALL_PREFIX}")
set(LIBRARY_OUTPUT_PATH "lib")# CACHE PATH "Output directory for libraries" )
set(EXECUTABLE_OUTPUT_PATH "bin")# CACHE PATH "Output directory for applications" )

message(STATUS "Install Path: ${CMAKE_INSTALL_PREFIX}")
if(UNIX)
    add_definitions( -DSYSTEM_LINUX)
    add_definitions( -DICL_SYSTEM_LINUX)
    set(SYSTEM_LINUX_COND TRUE)
endif()
if(APPLE)
    add_definitions( -DSYSTEM_APPLE)
endif()
if(WIN32)
    add_definitions( -DSYSTEM_WINDOWS)
    add_definitions( -DICL_SYSTEM_WINDOWS)
endif()

set(BUILD_EXAMPLES ON CACHE BOOL "Build example applications")
set(BUILD_STATIC_LIBS ON CACHE BOOL "Build also static libraries of each subpackage")

#check for IPP default check location /vol/nivision/IPP/6.1-ia32
find_path(IPP_PATH "ipp.h" "/vol/nivision/IPP/6.1-ia32/include" DOC "The path to IPP")
if(IPP_PATH)
set(IPP_FOUND TRUE)
set(HAVE_IPP_COND TRUE)
add_definitions( -DHAVE_IPP)
set(USE_IPP ON CACHE BOOL "Use IPP when available")
include_directories("${IPP_PATH}")
link_directories("/vol/nivision/IPP/6.1-ia32/sharedlib")
else()
set(IPP_FOUND FALSE)
set(HAVE_IPP_COND FALSE)
set(USE_IPP OFF CACHE BOOL "Use IPP when available")
endif()
message(STATUS "IPP detected: ${IPP_FOUND}")

#check for MKL
find_path(MKL_PATH "mkl.h" "/vol/nivision/MKL/10.2/include" DOC "The path to MKL")
if(MKL_PATH)
set(MKL_FOUND TRUE)
set(USE_MKL ON CACHE BOOL "Use MKL when available")
set(HAVE_MKL_COND TRUE)
add_definitions( -DHAVE_MKL)
include_directories("${MKL_PATH}")
link_directories("/vol/nivision/MKL/10.2/lib/32")
else()
set(MKL_FOUND FALSE)
set(HAVE_MKL_COND FALSE)
set(USE_MKL OFF CACHE BOOL "Use MKL when available")
endif()
message(STATUS "MKL detected: ${MKL_FOUND}")

#check for OpenCV
find_path(OPENCV_PATH "cxtypes.h" "/opt/OpenCV2/include/opencv" DOC "The path to OpenCV")
if(OPENCV_PATH)
set(OPENCV_FOUND TRUE)
set(USE_OPENCV ON CACHE BOOL "Use OpenCV when available")
set(HAVE_OPENCV_COND TRUE)
add_definitions( -DHAVE_OPENCV)
include_directories("${OPENCV_PATH}")
link_directories("/opt/OpenCV2/lib")
else()
set(OPENCV_FOUND FALSE)
set(HAVE_OPENCV_COND FALSE)
set(USE_OPENCV OFF CACHE BOOL "Use OpenCV when available")
endif()
message(STATUS "OpenCV detected: ${OPENCV_FOUND}")
#endif(UNIX)

#check for HAVE_LIBZ_COND
find_path(LIBZ_PATH "zlib.h" "/usr/include" DOC "The path to libz")
if(LIBZ_PATH)
set(LIBZ_FOUND TRUE)
set(USE_LIBZ ON CACHE BOOL "Use libz when available")
set(HAVE_LIBZ_COND TRUE)
add_definitions( -DHAVE_LIBZ)
include_directories("${LIBZ_PATH}")
link_directories("/usr/lib")
else()
set(LIBZ_FOUND FALSE)
set(HAVE_LIBZ_COND FALSE)
set(USE_LIBZ OFF CACHE BOOL "Use libz when available")
endif()
message(STATUS "libz detected: ${LIBZ_FOUND}")

#check for HAVE_LIBMESASR_COND
find_path(LIBMESASR_PATH "libMesaSR.h" "/usr/include" DOC "The path to libmesasr")
if(LIBMESASR_PATH)
set(LIBMESASR_FOUND TRUE)
set(USE_LIBMESASR ON CACHE BOOL "Use libmesasr when available")
set(HAVE_LIBMESASR_COND TRUE)
add_definitions( -DHAVE_LIBMESASR)
include_directories("${LIBMESASR_PATH}")
link_directories("/usr/lib")
else()
set(LIBMESASR_FOUND FALSE)
set(HAVE_LIBMESASR_COND FALSE)
set(USE_LIBMESASR OFF CACHE BOOL "Use libmesasr when available")
endif()
message(STATUS "libmesasr detected: ${LIBMESASR_FOUND}")

#check for HAVE_LIBJPEG_COND
#FINDJPEG
find_path(LIBJPEG_PATH "jpeglib.h" "/usr/include" DOC "The path to libjpeg")
if(LIBJPEG_PATH)
set(LIBJPEG_FOUND TRUE)
set(USE_LIBJPEG ON CACHE BOOL "Use libjpeg when available")
set(HAVE_LIBJPEG_COND TRUE)
add_definitions( -DHAVE_LIBJPEG)
include_directories("${LIBJPEG_PATH}")
link_directories("/usr/lib")
else()
set(LIBJPEG_FOUND FALSE)
set(HAVE_LIBJPEG_COND FALSE)
set(USE_LIBJPEG OFF CACHE BOOL "Use libjpeg when available")
endif()
message(STATUS "libjpeg detected: ${LIBJPEG_FOUND}")

#check for HAVE_LIBMAGICK_COND
find_path(IMAGEMAGICK_PATH "Magick++.h" "/usr/include/GraphicsMagick" DOC "The path to Magick++")
if(IMAGEMAGICK_PATH)
set(HAVE_IMAGEMAGICK_COND TRUE)
add_definitions( -DHAVE_IMAGEMAGICK)
set(IMAGEMAGICK_FOUND TRUE)
set(USE_IMAGEMAGICK ON CACHE BOOL "Use OpenCV when available")
include_directories("${IMAGEMAGICK_PATH}")
link_directories("/usr/lib")
else()
set(IMAGEMAGICK_FOUND FALSE)
set(HAVE_IMAGEMAGICK_COND FALSE)
set(USE_IMAGEMAGICK OFF CACHE BOOL "Use OpenCV when available")
endif()
message(STATUS "Magick++ detected: ${IMAGEMAGICK_FOUND}")

#check for HAVE_LIBDC_COND
find_path(LIBDC_PATH "dc1394.h" "/usr/include/dc1394" DOC "The path to dc")
if(LIBDC_PATH)
set(LIBDC_FOUND TRUE)
set(USE_LIBDC ON CACHE BOOL "Use dc when available")
set(HAVE_LIBDC_COND TRUE)
add_definitions( -DHAVE_LIBDC)
include_directories("${LIBDC_PATH}")
link_directories("/usr/lib")
else()
set(LIBDC_FOUND FALSE)
set(HAVE_LIBDC_COND FALSE)
set(USE_LIBDC OFF CACHE BOOL "Use dc when available")
endif()
message(STATUS "dc detected: ${LIBDC_FOUND}")

#check for HAVE_UNICAP_COND
find_path(UNICAP_PATH "unicap.h" "/usr/include/unicap" DOC "The path to Unicap")
if(UNICAP_PATH)
set(UNICAP_FOUND TRUE)
set(USE_UNICAP ON CACHE BOOL "Use Unicap when available")
set(HAVE_UNICAP_COND TRUE)
add_definitions( -DHAVE_UNICAP)
add_definitions(-DUNICAP_FLAGS_NOT_AS_ENUM)
include_directories("${UNICAP_PATH}")
#link_directories("${UNICAP_PATH}/../../lib")
link_directories("/usr/lib")
else()
set(UNICAP_FOUND FALSE)
set(HAVE_UNICAP_COND FALSE)
set(USE_UNICAP OFF CACHE BOOL "Use Unicap when available")
endif()
message(STATUS "Unicap detected: ${UNICAP_FOUND}")

#check for HAVE_XINE_COND
find_path(XINE_PATH "xine.h" "/usr/include/" DOC "The path to Xine")
if(XINE_PATH)
set(XINE_FOUND TRUE)
set(USE_XINE ON CACHE BOOL "Use Xine when available")
set(HAVE_XINE_COND TRUE)
add_definitions( -DHAVE_XINE)
include_directories("${XINE_PATH}")
include_directories("${XINE_PATH}/xine")
link_directories("/usr/lib")
else()
set(XINE_FOUND FALSE)
set(HAVE_XINE_COND FALSE)
set(USE_XINE OFF CACHE BOOL "Use Xine when available")
endif()
message(STATUS "Xine detected: ${XINE_FOUND}")

#check for HAVE_XCF_COND
find_path(XCF_PATH "XCFBase.hpp" "/opt/xcf/include/xcf" DOC "The path to XCF")
if(XCF_PATH)
set(XCF_FOUND TRUE)
set(USE_XCF ON CACHE BOOL "Use XCF when available")
set(HAVE_XCF_COND TRUE)
add_definitions( -DHAVE_XCF)
include_directories("${XCF_PATH}")
include_directories("/opt/xcf/include")
link_directories("/opt/xcf/lib")
else()
set(XCF_FOUND FALSE)
set(HAVE_XCF_COND FALSE)
set(USE_XCF OFF CACHE BOOL "Use XCF when available")
endif()
message(STATUS "XCF detected: ${XCF_FOUND}")

# QT4 Handling
FIND_PACKAGE(Qt4 COMPONENTS QtCore QtGui QtOpenGL)
if(QT_FOUND)
add_definitions( -DHAVE_QT)
INCLUDE(${QT_USE_FILE})
set(HAVE_Qt_COND TRUE)
endif()
message(STATUS "Qt4 detected: ${QT_FOUND}")

#OpenGL
find_path(OPENGL_PATH "gl.h" "/usr/include/GL" DOC "The path to XCF")
if(OPENGL_PATH)
set(OPENGL_FOUND TRUE)
set(USE_OPENGL ON CACHE BOOL "Use OPENGL when available")
set(HAVE_OPENGL_COND TRUE)
add_definitions( -DHAVE_OPENGL)
include_directories("/usr/include/GL")
link_directories("/usr/lib")
else()
set(OPENGL_FOUND FALSE)
set(HAVE_OPENGL_COND FALSE)
set(USE_OPENGL OFF CACHE BOOL "Use XCF when available")
endif()
message(STATUS "OpenGL detected: ${OPENGL_FOUND}")

#SVS
find_path(SVS_PATH "dcam.h" "/vol/nivision/SVS/4.2/src" DOC "The path to XCF")
if(SVS_PATH)
set(SVS_FOUND TRUE)
set(USE_SVS ON CACHE BOOL "Use SVS when available")
set(HAVE_SVS_COND TRUE)
add_definitions( -DHAVE_SVS)
include_directories("/vol/nivision/SVS/4.2/src")
link_directories("/vol/nivision/SVS/4.2/bin")
else()
set(SVS_FOUND FALSE)
set(HAVE_SVS_COND FALSE)
set(USE_SVS OFF CACHE BOOL "Use SVS when available")
endif()
message(STATUS "SVS detected: ${SVS_FOUND}")

include_directories(${PROJECT_SOURCE_DIR}/include)

include(UseDoxygen OPTIONAL)
FIND_PACKAGE(Doxygen)

#add subdirs
add_subdirectory(ICLUtils)
add_subdirectory(ICLCore)
add_subdirectory(ICLCC)
add_subdirectory(ICLFilter)
add_subdirectory(ICLBlob)
add_subdirectory(ICLOpenCV)
add_subdirectory(ICLIO)
add_subdirectory(ICLQt)
add_subdirectory(ICLQuick)
add_subdirectory(ICLGeom)
add_subdirectory(ICLAlgorithms)

install (DIRECTORY ${CMAKE_SOURCE_DIR}/include/
         DESTINATION ${CMAKE_INSTALL_PREFIX}/include/ICL
	FILES_MATCHING PATTERN "*.h"
)

if(DOXYGEN_FOUND)
install(DIRECTORY ${CMAKE_SOURCE_DIR}/doc/
         DESTINATION ${CMAKE_INSTALL_PREFIX}/doc/ICL
)
#cat doxyfile | sed "s|ICL_SUB_PACKAGE_PLACEHOLDER|${subdir}|g" > doxyfile)
# prepare doxygen configuration file
set(ICL_SUB_PACKAGE_PLACEHOLDER2 ICLUtils ICLCore ICLCC ICLFilter ICLBlob ICLOpenCV ICLIO ICLQt ICLQuick ICLGeom ICLAlgorithms)
foreach(ICL_SUB_PACKAGE_PLACEHOLDER ${ICL_SUB_PACKAGE_PLACEHOLDER2})
    configure_file(doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}/doc/doxyfile @ONLY)
    #copy pics
	# file(COPY ${ICL_SUB_PACKAGE_PLACEHOLDER}/doc/
	#	DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}/doc
	#	FILES_MATCHING 
	#		PATTERN "*.png" 
	#		PATTERN "*.jpg")
	exec_program(cp ARGS "\"${ICL_SUB_PACKAGE_PLACEHOLDER}/doc/*.png  ${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}/doc\"") 
	exec_program(cp ARGS "\"${ICL_SUB_PACKAGE_PLACEHOLDER}/doc/*.jpg  ${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}/doc\"") 
	exec_program(mkdir ARGS "\"${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}/doc/html/\"")
    # add doxygen as target
    #add_custom_target(doxygen_${ICL_SUB_PACKAGE_PLACEHOLDER} ${DOXYGEN_EXECUTABLE} "${ICL_SUB_PACKAGE_PLACEHOLDER}/doc/doxyfile")
endforeach()

# add doxygen as dependency to doc-target
get_target_property(DOC_TARGET doc TYPE)
if(NOT DOC_TARGET)
	add_custom_target(doc)
endif()
endif()

if(SYSTEM_LINUX_COND)
#write pkg config files
set(ICL_SUB_PACKAGE_PLACEHOLDER ICLUtils)
set(prefix      ${CMAKE_INSTALL_PREFIX})
set(REQUIRE "")
set(OPTIONAL_INCLUDES "")
set(OPTIONAL_LIBS "")
if(IPP_FOUND)
set(OPTIONAL_INCLUDES "-I${IPP_PATH} -DHAVE_IPP")
set(OPTIONAL_LIBS "-L${IPP_PATH}/../sharedlib -lippcore -lippi -lipps -lippsr -lippcv -lippm -lippcc -lguide -pthread -liomp5")
endif()
if(MKL_FOUND)
set(OPTIONAL_INCLUDES "${OPTIONAL_INCLUDES} -I${MKL_PATH} -DHAVE_MKL")
set(OPTIONAL_LIBS "${OPTIONAL_LIBS} -L${MKL_PATH}/../lib/32 -lmkl_intel -lmkl_intel_thread -lmkl_core -liomp5 -pthread -Wl,-rpath -Wl,${IPP_PATH}/../sharedlib -Wl,-rpath -Wl,${MKL_PATH}/../lib/32")
endif()
set(ICL_PACKAGE_DESCRIPTION "ICL's ${ICL_SUB_PACKAGE_PLACEHOLDER} package")
set(LIBS "-L\${exec_prefix}/lib -l${ICL_SUB_PACKAGE_PLACEHOLDER} '-Wl,-rpath -Wl,\${exec_prefix}/lib ${OPTIONAL_LIBS}'")
set(INCLUDES "-I\${prefix}/include/ICL ${OPTIONAL_INCLUDES}")
configure_file(pkg.in ${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc @ONLY)
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc" DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig/)
set(OPTIONAL_INCLUDES "")
set(OPTIONAL_LIBS "")

set(ICL_SUB_PACKAGE_PLACEHOLDER ICLCore)
set(prefix      ${CMAKE_INSTALL_PREFIX})
set(REQUIRE "ICLUtils")
set(ICL_PACKAGE_DESCRIPTION "ICL's ${ICL_SUB_PACKAGE_PLACEHOLDER} package")
set(LIBS "-L\${exec_prefix}/lib -l${ICL_SUB_PACKAGE_PLACEHOLDER} '-Wl,-rpath -Wl,\${exec_prefix}/lib ${OPTIONAL_LIBS}'")
set(INCLUDES "-I\${prefix}/include/ICL ${OPTIONAL_INCLUDES}")
configure_file(pkg.in ${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc @ONLY)
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc" DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig/)

set(ICL_SUB_PACKAGE_PLACEHOLDER ICLCC)
set(prefix      ${CMAKE_INSTALL_PREFIX})
set(REQUIRE "ICLCore")
set(ICL_PACKAGE_DESCRIPTION "ICL's ${ICL_SUB_PACKAGE_PLACEHOLDER} package")
set(LIBS "-L\${exec_prefix}/lib -l${ICL_SUB_PACKAGE_PLACEHOLDER} '-Wl,-rpath -Wl,\${exec_prefix}/lib ${OPTIONAL_LIBS}'")
set(INCLUDES "-I\${prefix}/include/ICL ${OPTIONAL_INCLUDES}")
configure_file(pkg.in ${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc @ONLY)
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc" DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig/)

set(ICL_SUB_PACKAGE_PLACEHOLDER ICLFilter)
set(prefix      ${CMAKE_INSTALL_PREFIX})
set(REQUIRE "ICLCC")
set(ICL_PACKAGE_DESCRIPTION "ICL's ${ICL_SUB_PACKAGE_PLACEHOLDER} package")
set(LIBS "-L\${exec_prefix}/lib -l${ICL_SUB_PACKAGE_PLACEHOLDER} '-Wl,-rpath -Wl,\${exec_prefix}/lib ${OPTIONAL_LIBS}'")
set(INCLUDES "-I\${prefix}/include/ICL ${OPTIONAL_INCLUDES}")
configure_file(pkg.in ${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc @ONLY)
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc" DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig/)

set(ICL_SUB_PACKAGE_PLACEHOLDER ICLBlob)
set(prefix      ${CMAKE_INSTALL_PREFIX})
set(REQUIRE "ICLCC")
set(ICL_PACKAGE_DESCRIPTION "ICL's ${ICL_SUB_PACKAGE_PLACEHOLDER} package")
set(LIBS "-L\${exec_prefix}/lib -l${ICL_SUB_PACKAGE_PLACEHOLDER} '-Wl,-rpath -Wl,\${exec_prefix}/lib ${OPTIONAL_LIBS}'")
set(INCLUDES "-I\${prefix}/include/ICL ${OPTIONAL_INCLUDES}")
configure_file(pkg.in ${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc @ONLY)
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc" DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig/)

if(OPENCV_FOUND)
set(ICL_SUB_PACKAGE_PLACEHOLDER ICLOpenCV)
set(prefix      ${CMAKE_INSTALL_PREFIX})
set(REQUIRE "ICLCore opencv")
set(OPTIONAL_INCLUDES "-I${OPENCV_PATH} -DHAVE_OPENCV")
set(OPTIONAL_LIBS "-L${OPENCV_PATH}/../../lib -lcv -lcvaux -lcxcore -lhighgui -lml")
set(ICL_PACKAGE_DESCRIPTION "ICL's ${ICL_SUB_PACKAGE_PLACEHOLDER} package")
set(LIBS "-L\${exec_prefix}/lib -l${ICL_SUB_PACKAGE_PLACEHOLDER} '-Wl,-rpath -Wl,\${exec_prefix}/lib ${OPTIONAL_LIBS}'")
set(INCLUDES "-I\${prefix}/include/ICL ${OPTIONAL_INCLUDES}")
configure_file(pkg.in ${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc @ONLY)
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc" DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig/)
set(OPTIONAL_INCLUDES "")
set(OPTIONAL_LIBS "")
endif()

set(ICL_SUB_PACKAGE_PLACEHOLDER ICLIO)
set(prefix      ${CMAKE_INSTALL_PREFIX})
set(REQUIRE "ICLFilter")
if(OPENCV_FOUND)
set(REQUIRE "${REQUIRE} ICLOpenCV")
endif()
set(ICL_PACKAGE_DESCRIPTION "ICL's ${ICL_SUB_PACKAGE_PLACEHOLDER} package")
if(LIBZ_FOUND)
set(OPTIONAL_LIBS "${OPTIONAL_LIBS} -lz")
set(OPTIONAL_INCLUDES "-DHAVE_LIBZ")
endif()
if(LIBJPEG_FOUND)
set(OPTIONAL_LIBS "${OPTIONAL_LIBS} -ljpeg")
set(OPTIONAL_INCLUDES "${OPTIONAL_INCLUDES} -DHAVE_LIBJPEG")
endif()
if(LIBMESASR_FOUND)
set(OPTIONAL_LIBS "${OPTIONAL_LIBS} -lmesasr")
set(OPTIONAL_INCLUDES "${OPTIONAL_INCLUDES} -DHAVE_LIBMESASR")
endif()
if(LIBMAGICK_FOUND)
set(OPTIONAL_LIBS "${OPTIONAL_LIBS} -lGraphicsMagick++")
set(OPTIONAL_INCLUDES "${OPTIONAL_INCLUDES} -DHAVE_LIBMAGICK")
endif()
if(VIDEODEV_FOUND)
set(OPTIONAL_INCLUDES "${OPTIONAL_INCLUDES} -DHAVE_VIDEODEV")
endif()
if(LIBDC_FOUND)
set(REQUIRE "${REQUIRE} libdc1394-2")
set(OPTIONAL_INCLUDES "${OPTIONAL_INCLUDES} -DHAVE_LIBDC")
endif()
if(XINE_FOUND)
set(REQUIRE "${REQUIRE} libxine")
set(OPTIONAL_INCLUDES "${OPTIONAL_INCLUDES} -DHAVE_XINE")
endif()
if(UNICAP_FOUND)
set(REQUIRE "${REQUIRE} libunicap")
set(OPTIONAL_INCLUDES "${OPTIONAL_INCLUDES} -DHAVE_UNICAP")
endif()
if(XCF_FOUND)
set(REQUIRE "${REQUIRE} xcf xmltio Memory")
set(OPTIONAL_INCLUDES "${OPTIONAL_INCLUDES} -DHAVE_XCF")
endif()
set(LIBS "-L\${exec_prefix}/lib -l${ICL_SUB_PACKAGE_PLACEHOLDER} '-Wl,-rpath -Wl,\${exec_prefix}/lib ${OPTIONAL_LIBS}'")
set(INCLUDES "-I\${prefix}/include/ICL ${OPTIONAL_INCLUDES}")
configure_file(pkg.in ${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc @ONLY)
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc" DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig/)
set(OPTIONAL_INCLUDES "")
set(OPTIONAL_LIBS "")

if(QT_FOUND AND OPENGL_FOUND)
set(ICL_SUB_PACKAGE_PLACEHOLDER ICLQt)
set(prefix      ${CMAKE_INSTALL_PREFIX})
set(REQUIRE "ICLFilter ICLIO  QtCore QtOpenGL QtGui")
set(OPTIONAL_INCLUDES "-DHAVE_QT -DHAVE_OPENGL")
set(OPTIONAL_LIBS "-lGL -lGLU ")
set(ICL_PACKAGE_DESCRIPTION "ICL's ${ICL_SUB_PACKAGE_PLACEHOLDER} package")
set(LIBS "-L\${exec_prefix}/lib -l${ICL_SUB_PACKAGE_PLACEHOLDER} '-Wl,-rpath -Wl,\${exec_prefix}/lib ${OPTIONAL_LIBS}'")
set(INCLUDES "-I\${prefix}/include/ICL ${OPTIONAL_INCLUDES}")
configure_file(pkg.in ${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc @ONLY)
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc" DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig/)
set(OPTIONAL_INCLUDES "")
set(OPTIONAL_LIBS "")
endif()

set(ICL_SUB_PACKAGE_PLACEHOLDER ICLQuick)
set(prefix      ${CMAKE_INSTALL_PREFIX})
set(REQUIRE "ICLQt ICLBlob")
set(ICL_PACKAGE_DESCRIPTION "ICL's ${ICL_SUB_PACKAGE_PLACEHOLDER} package")
set(LIBS "-L\${exec_prefix}/lib -l${ICL_SUB_PACKAGE_PLACEHOLDER} '-Wl,-rpath -Wl,\${exec_prefix}/lib ${OPTIONAL_LIBS}'")
set(INCLUDES "-I\${prefix}/include/ICL ${OPTIONAL_INCLUDES}")
configure_file(pkg.in ${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc @ONLY)
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc" DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig/)

set(ICL_SUB_PACKAGE_PLACEHOLDER ICLGeom)
set(prefix      ${CMAKE_INSTALL_PREFIX})
set(REQUIRE "ICLQuick")
set(ICL_PACKAGE_DESCRIPTION "ICL's ${ICL_SUB_PACKAGE_PLACEHOLDER} package")
set(LIBS "-L\${exec_prefix}/lib -l${ICL_SUB_PACKAGE_PLACEHOLDER} '-Wl,-rpath -Wl,\${exec_prefix}/lib ${OPTIONAL_LIBS}'")
set(INCLUDES "-I\${prefix}/include/ICL ${OPTIONAL_INCLUDES}")
configure_file(pkg.in ${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc @ONLY)
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc" DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig/)

set(ICL_SUB_PACKAGE_PLACEHOLDER ICLAlgorithms)
set(prefix      ${CMAKE_INSTALL_PREFIX})
set(REQUIRE "ICLQuick ICLGeom")
if(OPENCV_FOUND)
set(REQUIRE "ICLOpenCV ${REQUIRE}")
endif()
if(SVS_FOUND)
set(OPTIONAL_INCLUDES "-I${SVS_PATH} -DHAVE_SVS")
set(OPTIONAL_LIBS "-L${SVS_PATH}/../bin -lsvs -lsvscalc -Wl,-rpath -Wl,${SVS_PATH}/../bin")
endif()
set(ICL_PACKAGE_DESCRIPTION "ICL's ${ICL_SUB_PACKAGE_PLACEHOLDER} package")
set(LIBS "-L\${exec_prefix}/lib -l${ICL_SUB_PACKAGE_PLACEHOLDER} '-Wl,-rpath -Wl,\${exec_prefix}/lib ${OPTIONAL_LIBS}'")
set(INCLUDES "-I\${prefix}/include/ICL ${OPTIONAL_INCLUDES}")
configure_file(pkg.in ${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc @ONLY)
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc" DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig/)
set(OPTIONAL_INCLUDES "")
set(OPTIONAL_LIBS "")

set(ICL_SUB_PACKAGE_PLACEHOLDER icl)
set(prefix      ${CMAKE_INSTALL_PREFIX})
set(REQUIRE "ICLUtils ICLCore ICLIO ICLCC ICLBlob ICLFilter ICLOpenCV ICLQuick ICLGeom ICLAlgorithms ICLQt ICLOpenCV")
set(ICL_PACKAGE_DESCRIPTION "Image Component Library (ICL)")
set(LIBS "")
set(INCLUDES "")
configure_file(pkg.in ${CMAKE_CURRENT_BINARY_DIR}/icl.pc @ONLY)
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc" DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig/)
endif()

#SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Remote Operations On Files")
#SET(CPACK_PACKAGE_VENDOR "")
#SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/ReadMe.txt")
#SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/COPYING")
SET(CPACK_PACKAGE_VERSION_MAJOR "5")
SET(CPACK_PACKAGE_VERSION_MINOR "0")
SET(CPACK_PACKAGE_VERSION_PATCH "2")
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "/temp/ICL_inst")#"CMake ${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}")
SET(CPACK_STRIP_FILES "bin")
SET(CPACK_SOURCE_STRIP_FILES "")
SET(CPACK_PACKAGE_EXECUTABLES "icl-xv")# "FTP client")
include(CPack)

