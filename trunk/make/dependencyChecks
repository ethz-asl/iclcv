# -*-mode: Makefile;-*-  ;; Have EMACS always use makefile-mode for this file.

############################# check for IPP ############################
ifeq "${OS_TYPE}" "linux"
# Linux support
ifeq "$(wildcard $(IPP_ROOT)/5.1/sharedlib/libipp*.so)" ""
ifneq "$(findstring -DWITH_IPP_OPTIMIZATION,$(CDEFINES))" ""
ifeq "$(_WARN_IPP)" ""
_WARN_IPP=done # warn only once
export _WARN_IPP
$(warning "IPP 5.1 is not available. Its usage is switched off.")
endif
CDEFINES:=$(filter-out -DWITH_IPP_OPTIMIZATION, $(CDEFINES))
CPPDEFINES:=$(filter-out -DWITH_IPP_OPTIMIZATION, $(CPPDEFINES))
endif
else
HAVE_IPP=TRUE
endif
endif #OS_TYPE

ifeq "${OS_TYPE}" "macosx"
# Mac support
ifeq "$(wildcard $(IPP_ROOT)/Intel_IPP.framework/Libraries/libipp*.dylib)" ""
ifneq "$(findstring -DWITH_IPP_OPTIMIZATION,$(CDEFINES))" ""
ifeq "$(_WARN_IPP)" ""
_WARN_IPP=done # warn only once
export _WARN_IPP
$(warning "IPP is not available. Its usage is switched off.")
endif
CDEFINES:=$(filter-out -DWITH_IPP_OPTIMIZATION, $(CDEFINES))
CPPDEFINES:=$(filter-out -DWITH_IPP_OPTIMIZATION, $(CPPDEFINES))
endif
else
HAVE_IPP=TRUE
endif
endif #OS_TYPE

############################# check for JPEG-SUPPORT ####################
LIBJPEG_ROOT ?= /usr
ifeq "$(wildcard ${LIBJPEG_ROOT}/lib/libjpeg.so)" ""
ifneq "$(findstring -DWITH_JPEG_SUPPORT,$(CDEFINES))" ""
ifeq "$(_WARN_JPEG)" ""
_WARN_JPEG=done # warn only once
export _WARN_JPEG
$(warning "libjpeg is not available. Its usage is switched off.")
endif
CDEFINES:=$(filter-out -DWITH_JPEG_SUPPORT, $(CDEFINES))
CPPDEFINES:=$(filter-out -DWITH_JPEG_SUPPORT, $(CPPDEFINES))
endif
else
HAVE_LIBJPEG=TRUE
endif

############################# check for ZLIB-SUPPORT ####################
LIBZ_ROOT ?= /usr
ifeq "$(wildcard ${LIBZ_ROOT}/lib/libz.so)" ""
ifneq "$(findstring -DWITH_ZLIB_SUPPORT,$(CDEFINES))" ""
ifeq "$(_WARN_Z)" ""
_WARN_Z=done # warn only once
export _WARN_Z
$(warning "libz is not available. Its usage is switched off.")
endif
CDEFINES:=$(filter-out -DWITH_ZLIB_SUPPORT, $(CDEFINES))
CPPDEFINES:=$(filter-out -DWITH_ZLIB_SUPPORT, $(CPPDEFINES))
endif
else
HAVE_LIBZ=TRUE
endif

############################# check for QT 4 ############################
# try whether useful QTDIR is already set
ifeq "$(shell ${QTDIR}/bin/qmake --version 2>&1 | grep 'Using Qt version 4.')" ""
QTDIR=/vol/qt/4.3
endif
# try whether QTDIR contains QT 4 now
ifneq "$(shell ${QTDIR}/bin/qmake --version 2>&1 | grep 'Using Qt version 4.')" ""
HAVE_QT=TRUE
else
ifeq "$(_WARN_QT)" ""
_WARN_QT=done # warn only once
export _WARN_QT
$(warning "Qt version 4.3 is not available. Qt-specific targets are not built.")
endif
endif

############################# check for libdc1394.so.2x ############################
LIBDC_ROOT ?= /vol/video
ifeq "$(wildcard ${LIBDC_ROOT}/lib/libdc1394.*2*)" ""
ifeq "${_WARN_LIBDC}" ""
$(warning "libdc1394.so.2x was not found in ${LIBDC_ROOT}/lib. DCGrabber support disabled.")
export _WARN_LIBDC=done
endif # _WARN_LIBDC
else # found libdc1394.so.2x in LIBDC_ROOT/lib ->ok
HAVE_LIBDC=TRUE
endif # searching in LIBDC_ROOT/lib

############################# check for libraw1394.so #############################
LIBRAW_ROOT ?= /vol/video
ifeq "$(wildcard ${LIBRAW_ROOT}/lib/libraw1394.so*)" ""
ifeq "${_WARN_LIBRAW}" ""
$(warning "libraw1394.so was not found in ${LIBRAW_ROOT}/lib. DCGrabber support disabled.")
export _WARN_LIBRAW=done
endif # _WARN_LIBRAW
else # found libraw1394.so in LIBRAW_ROOT/lib ->ok
HAVE_LIBRAW=TRUE
endif # searching in LIBRAW_ROOT/lib

############################# check both DCGrabber dependencies ####################
ifneq "$(HAVE_LIBDC)" ""
ifneq "$(HAVE_LIBRAW)" ""
HAVE_LIBDC_AND_LIBRAW=TRUE
endif
endif

############################# check for SVS ########################
# try whether SVS is available
SVS_ROOT ?= /vol/vision/SVS/4.2
ifneq "$(wildcard ${SVS_ROOT}/bin/libsvs.so)" ""
HAVE_SVS=TRUE
else
ifeq "$(_WARN_SVS)" ""
_WARN_SVS=done # warn only once
export _WARN_SVS
$(warning "SVS library is not available. SVS specific targets are not built.")
endif
endif

############################# check for unicap ##########################
UNICAP_ROOT ?= /vol/video
ifeq "$(wildcard ${UNICAP_ROOT}/lib/libunicap*.so)" ""
ifeq "${_WARN_UNICAP}" ""
$(warning "libunicap.so was not found in ${UNICAP_ROOT}/lib. Unicap support disabled.")
export _WARN_UNICAP=done
endif # _WARN_UNICAP
else # found libunicap.so in UNICAP_ROOT/lib ->ok
HAVE_UNICAP=TRUE
endif # searching in UNICAP_ROOT/lib

############################# check for XCF ########################
XCF_ROOT ?= /vol/xcf
ifeq "$(wildcard ${XCF_ROOT}/lib/libxcf*.so)" ""
ifeq "${_WARN_XCF}" ""
$(warning "libxcf.so was not found in ${XCF_ROOT}/lib. XCF support disabled.")
export _WARN_XCF=done
endif # _WARN_XCF
else # found libxcf.so in XCF_ROOT/lib ->ok
HAVE_XCF=TRUE
endif # searching in XCF_ROOT/lib
