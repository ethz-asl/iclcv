CMAKE_MINIMUM_REQUIRED(VERSION 2.8.1)
PROJECT(ICL)
#agni version
set(ICL_MAJOR "5")
set(ICL_MINOR "1")
set(ICL_PATCH "0")
set(VERSION "${ICL_MAJOR}.${ICL_MINOR}.${ICL_PATCH}")
cmake_policy(SET CMP0002 OLD)
#cmake_policy(SET CMP0015 OLD)

set(ICL_DEBUG_MODE OFF CACHE BOOL "Compile with debug options")
set(CMAKE_VERBOSE_MAKEFILE OFF)
if(ICL_DEBUG_MODE)
set(CMAKE_CXX_FLAGS "-Wall -O0 -g3")
set(CMAKE_BUILD_TYPE "Debug" CACHE INTERNAL "")
else()
set(CMAKE_CXX_FLAGS "-O4 -funroll-loops -march=native")
set(CMAKE_BUILD_TYPE "Release" CACHE INTERNAL "")
endif()
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")


set(ICL_INSTALL_PREFIX "/temp/testICL${VERSION}" CACHE PATH "")
set(CMAKE_INSTALL_PREFIX "${ICL_INSTALL_PREFIX}" CACHE INTERNAL "")
message(STATUS "Install Path: ${CMAKE_INSTALL_PREFIX}")

if(UNIX)
    add_definitions( -DSYSTEM_LINUX)
    add_definitions( -DICL_SYSTEM_LINUX)
    set(SYSTEM_LINUX_COND TRUE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
endif()
if(APPLE)
    add_definitions( -DSYSTEM_APPLE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
endif()
if(WIN32)
    add_definitions( -DSYSTEM_WINDOWS)
    add_definitions( -DICL_SYSTEM_WINDOWS)
endif()

#include file with macros
include(icl_cmake_macros.cmake)

set(ALL_ON OFF CACHE BOOL "Use all available third party libs")
set(USE_PKGCONF OFF CACHE BOOL "Use all available pkgconfig")
set(BUILD_EXAMPLES ON CACHE BOOL "Build example applications")
set(LIBRARY_OUTPUT_PATH "lib")# CACHE PATH "Output directory for libraries" )
set(EXECUTABLE_OUTPUT_PATH "bin")# CACHE PATH "Output directory for applications" )

set(USE_IPP OFF CACHE BOOL "Use IPP when available")
set(USE_MKL OFF CACHE BOOL "Use MKL when available")
set(USE_OPENCV OFF CACHE BOOL "Use OPENCV when available")
set(USE_LIBZ OFF CACHE BOOL "Use LIBZ when available")
set(USE_LIBMESASR OFF CACHE BOOL "Use LIBMESASR when available")
set(USE_LIBJPEG OFF CACHE BOOL "Use LIBJPEG when available")
set(USE_IMAGEMAGICK OFF CACHE BOOL "Use IMAGEMAGICK when available")
set(USE_LIBDC OFF CACHE BOOL "Use LIBDC when available")
set(USE_UNICAP OFF CACHE BOOL "Use UNICAP when available")
set(USE_XINE OFF CACHE BOOL "Use XINE when available")
set(USE_XCF OFF CACHE BOOL "Use XCF when available")
set(USE_QT OFF CACHE BOOL "Use QT when available")
set(USE_OPENGL OFF CACHE BOOL "Use OPENGL when available")
set(USE_SVS OFF CACHE BOOL "Use SVS when available")
set(USE_OPENSURF OFF CACHE BOOL "Use OPENSURF when available")

#opencv opensurf dc unicap libxine xcf qt
#pkg_check_modules  gtest imagemagick
FIND_PACKAGE(PkgConfig)


icl_check_external_package(IPP ipp.h sharedlib include /vol/nivision/IPP/6.1-ia32 HAVE_IPP_COND)
if(HAVE_IPP_COND)
    set(IPP_LIBS_l ippcore ippi ipps ippsr ippcv ippm ippcc guide iomp5)
endif()

icl_check_external_package(MKL mkl.h lib/32 include /vol/nivision/MKL/10.2 HAVE_MKL_COND)
if(HAVE_MKL_COND)
    set(MKL_LIBS_l mkl_intel mkl_intel_thread mkl_core iomp5)
endif()

icl_check_external_package(OPENCV cxtypes.h lib include/opencv /vol/nivision HAVE_OPENCV_COND)
if(HAVE_OPENCV_COND)
    if(${USE_PKGCONF})
		pkg_check_modules(OPENCV_PKG opencv)
		if(${OPENCV_PKG_FOUND})
			set(OPENCV_LIBS_l "${OPENCV_PKG_LIBRARIES}")
		endif()
    else()
		set(OPENCV_LIBS_l cxcore cv highgui cvaux ml)
    endif()
endif()

icl_check_external_package(LIBZ zlib.h lib include /usr HAVE_LIBZ_COND)
if(HAVE_LIBZ_COND)
	set(LIBZ_LIBS_l z)
endif()

icl_check_external_package(LIBMESASR libMesaSR.h lib include /vol/nivision HAVE_LIBMESASR_COND)
if(HAVE_LIBMESASR_COND)
	set(LIBMESASR_LIBS_l mesasr)
endif()

icl_check_external_package(LIBJPEG jpeglib.h lib include /usr HAVE_LIBJPEG_COND)
if(HAVE_LIBJPEG_COND)
	set(LIBJPEG_LIBS_l jpeg)
endif()

icl_check_external_package(IMAGEMAGICK Magick++.h lib include/GraphicsMagick /usr HAVE_IMAGEMAGICK_COND)
if(HAVE_IMAGEMAGICK_COND)
	set(LIBMAGICK_LIBS_l Magick++)
endif()

icl_check_external_package(LIBDC dc1394.h lib include/dc1394 /vol/nivision HAVE_LIBDC_COND)
if(HAVE_LIBDC_COND)
	if(${USE_PKGCONF})
		pkg_check_modules(LIBDC_PKG libdc1394-2)
		if(${LIBDC_PKG_FOUND})
			set(LIBDC_LIBS_l "${LIBDC_PKG_LIBRARIES}")
		endif()
    else()
		set(LIBDC_LIBS_l dc1394)
    endif()
endif()

icl_check_external_package(UNICAP unicap.h lib include/unicap /vol/nivision HAVE_UNICAP_COND)
if(HAVE_UNICAP_COND)
	if(${USE_PKGCONF})
		pkg_check_modules(UNICAP_PKG libunicap)
		if(${UNICAP_PKG_FOUND})
			set(UNICAP_LIBS_l "${UNICAP_PKG_LIBRARIES}")
		endif()
    else()
		set(UNICAP_LIBS_l unicap rt)
    endif()
	#additional definition
	add_definitions(-DUNICAP_FLAGS_NOT_AS_ENUM)
endif()

icl_check_external_package(XINE xineutils.h lib include/xine /vol/nivision HAVE_XINE_COND)
if(HAVE_XINE_COND)
	if(${USE_PKGCONF})
		pkg_check_modules(XINE_PKG libxine)
		if(${XINE_PKG_FOUND})
			set(XINE_LIBS_l "${XINE_PKG_LIBRARIES}")
		endif()
    else()
		set(XINE_LIBS_l xine)
    endif()
	#additional include path
	include_directories("${XINE_PATH}/include")
endif()

icl_check_external_package(XCF XCFBase.hpp lib include/xcf /vol/xcf HAVE_XCF_COND)
if(HAVE_XCF_COND)
	if(${USE_PKGCONF})
		pkg_check_modules(XCF_PKG xcf)		
		pkg_check_modules(XCF_XMLTIO_PKG xmltio)
		pkg_check_modules(XCF_MEMORY_PKG Memory)		
		if(${XCF_PKG_FOUND})
			set(XCF_LIBS_l "${XCF_PKG_LIBRARIES}")
		endif()
		if(${XCF_MEMORY_PKG_FOUND})
			set(XCF_LIBS_l "${XCF_LIBS_l};${XCF_MEMORY_PKG_LIBRARIES}")
		endif()
		if(${XCF_XMLTIO_PKG_FOUND})
			set(XCF_LIBS_l "${XCF_LIBS_l};${XCF_XMLTIO_PKG_LIBRARIES}")
		endif()
		list(LENGTH XCF_LIBS_l listsize)
		if(${listsize} GREATER 1)
			list(REMOVE_DUPLICATES XCF_LIBS_l)
			list(REMOVE_ITEM XCF_LIBS_l pthread)
		endif()
    else()
		set(XCF_LIBS_l xcf xqilla log4cxx Memory xmltio Ice IceUtil xerces-c)
    endif()
	#additional include path
	include_directories("${XCF_PATH}/include")
endif()

# QT4 Handling
FIND_PACKAGE(Qt4 COMPONENTS QtCore QtGui QtOpenGL)
if(QT_FOUND)
	if(${USE_QT} OR ${ALL_ON})
		set(USE_QT ON CACHE BOOL "Use QT when available" FORCE)
		add_definitions( -DHAVE_QT)
		INCLUDE(${QT_USE_FILE})
		set(HAVE_Qt_COND TRUE)
		if(${USE_PKGCONF})
			pkg_check_modules(QtCore_PKG QtCore)
			pkg_check_modules(QtGui_PKG QtGui)
			pkg_check_modules(QtOpenGL_PKG QtOpenGL)
			if(${QtCore_PKG_FOUND})
				set(Qt_LIBS_l "${QtCore_PKG_LIBRARIES}")
			endif()
			if(${QtGui_PKG_FOUND})
				set(Qt_LIBS_l "${Qt_LIBS_l};${QtGui_PKG_LIBRARIES}")
			endif()
			if(${QtOpenGL_PKG_FOUND})
				set(Qt_LIBS_l "${Qt_LIBS_l};${QtOpenGL_PKG_LIBRARIES}")
			endif()
    	else()
		set(Qt_LIBS_l QtCore QtGui QtOpenGL)
    	endif()
	else()
		set(HAVE_Qt_COND FALSE)
	endif()
endif()
message(STATUS "Qt4 detected: ${HAVE_Qt_COND}")

icl_check_external_package(OPENGL gl.h lib include/GL /usr HAVE_OPENGL_COND)
if(${HAVE_OPENGL_COND})
	set(OPENGL_LIBS_l GL GLU)
endif()

icl_check_external_package(SVS dcam.h bin src /vol/nivision/SVS/4.2 HAVE_SVS_COND)
if(HAVE_SVS_COND)
	set(SVS_LIBS_l svs svscalc)
endif()

icl_check_external_package(OPENSURF opensurf/surf.h lib include /vol/nivision HAVE_OPENSURF_COND)
if(HAVE_OPENSURF_COND)
	if(${USE_PKGCONF})
		pkg_check_modules(OPENSURF_PKG opensurf)
		if(${OPENSURF_PKG_FOUND})
			set(OPENSURF_LIBS_l "${OPENSURF_PKG_LIBRARIES}")
		endif()
    else()
		set(OPENSURF_LIBS_l opensurf)
    endif()
endif()

include_directories(${PROJECT_SOURCE_DIR}/include)
include(UseDoxygen OPTIONAL)
FIND_PACKAGE(Doxygen)

configure_file(${PROJECT_SOURCE_DIR}/include/ICLUtils/config.h.cmake ${PROJECT_SOURCE_DIR}/include/ICLUtils/config.h @only)

set(ICLUtils_external_dependencies IPP MKL)
set(ICLCore_internal_dependencies ICLUtils)
set(ICLCC_internal_dependencies ICLCore)
set(ICLFilter_internal_dependencies ICLCC)
set(ICLBlob_internal_dependencies ICLCC)
if(${HAVE_OPENCV_COND})
    set(ICLOpenCV_internal_dependencies ICLCore)
    set(ICLOpenCV_external_dependencies OPENCV)
    set(ICLIO_internal_dependencies ICLOpenCV ICLFilter)
    set(ICLAlgorithms_internal_dependencies ICLOpenCV ICLQuick ICLGeom)
else()
    set(ICLIO_internal_dependencies ICLFilter)
    set(ICLAlgorithms_internal_dependencies ICLQuick ICLGeom)
endif()

set(ICLIO_external_dependencies LIBZ LIBJPEG LIBMESASR LIBDC XINE UNICAP LIBMAGICK XCF)
set(ICLQt_internal_dependencies ICLFilter ICLIO)
set(ICLQt_external_dependencies Qt OPENGL)
if(${HAVE_Qt_COND})
    set(ICLQuick_internal_dependencies ICLQt ICLFilter ICLIO ICLBlob)
else()
    set(ICLQuick_internal_dependencies ICLFilter ICLIO ICLBlob)
endif()
set(ICLGeom_internal_dependencies ICLQuick)

set(ICLAlgorithms_external_dependencies OPENSURF SVS)

add_internal_dependencies(ICLCore_internal_dependencies ICLCore_dependencies)
add_internal_dependencies(ICLCC_internal_dependencies ICLCC_dependencies)
add_internal_dependencies(ICLFilter_internal_dependencies ICLFilter_dependencies)
add_internal_dependencies(ICLBlob_internal_dependencies ICLBlob_dependencies)
add_internal_dependencies(ICLOpenCV_internal_dependencies ICLOpenCV_dependencies)
add_internal_dependencies(ICLIO_internal_dependencies ICLIO_dependencies)
add_internal_dependencies(ICLQt_internal_dependencies ICLQt_dependencies)
add_internal_dependencies(ICLQuick_internal_dependencies ICLQuick_dependencies)
add_internal_dependencies(ICLGeom_internal_dependencies ICLGeom_dependencies)
add_internal_dependencies(ICLAlgorithms_internal_dependencies ICLAlgorithms_dependencies)

add_external_dependencies(ICLUtils_external_dependencies ICLUtils_dependencies)
add_external_dependencies(ICLOpenCV_external_dependencies ICLOpenCV_dependencies)
add_external_dependencies(ICLIO_external_dependencies ICLIO_dependencies)
add_external_dependencies(ICLQt_external_dependencies ICLQt_dependencies)
add_external_dependencies(ICLAlgorithms_external_dependencies ICLAlgorithms_dependencies)

#add subdirs
add_subdirectory(ICLUtils)
add_subdirectory(ICLCore)
add_subdirectory(ICLCC)
add_subdirectory(ICLFilter)
add_subdirectory(ICLBlob)
if(${HAVE_OPENCV_COND})
    add_subdirectory(ICLOpenCV)
endif()
add_subdirectory(ICLIO)
if(${HAVE_Qt_COND})
    add_subdirectory(ICLQt)
endif()
add_subdirectory(ICLQuick)
add_subdirectory(ICLGeom)
add_subdirectory(ICLAlgorithms)

install (DIRECTORY ${CMAKE_SOURCE_DIR}/include/
	DESTINATION ${CMAKE_INSTALL_PREFIX}/include/ICL
	FILES_MATCHING PATTERN "*.h"
	REGEX .svn* EXCLUDE
)

if(DOXYGEN_FOUND)
install(DIRECTORY ${CMAKE_SOURCE_DIR}/doc/
         DESTINATION ${CMAKE_INSTALL_PREFIX}/doc/ICL
)

# prepare doxygen configuration file
set(ICL_SUB_PACKAGE_PLACEHOLDER2 ICLUtils ICLCore ICLCC ICLFilter ICLBlob ICLOpenCV ICLIO ICLQt ICLQuick ICLGeom ICLAlgorithms)
foreach(ICL_SUB_PACKAGE_PLACEHOLDER ${ICL_SUB_PACKAGE_PLACEHOLDER2})
    	configure_file(doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}/doc/doxyfile @ONLY)
    	#copy pics
	file(COPY ${ICL_SUB_PACKAGE_PLACEHOLDER}/doc/
		DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}/doc
		FILES_MATCHING 
		PATTERN "*.png" 
		PATTERN "*.jpg")
	exec_program(mkdir ARGS "\"${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}/doc/html/\"")
endforeach()

# add doxygen as dependency to doc-target
get_target_property(DOC_TARGET doc TYPE)
if(NOT DOC_TARGET)
	add_custom_target(doc)
endif()
endif()


if(SYSTEM_LINUX_COND)
	set(lprefix      ${CMAKE_INSTALL_PREFIX})
	icl_create_pkg_config_file2("ICLUtils" "${ICLIO_internal_dependencies}" "${ICLIO_external_dependencies}")
	icl_create_pkg_config_file2("ICLCore" "${ICLIO_internal_dependencies}" "${ICLIO_external_dependencies}")
	icl_create_pkg_config_file2("ICLCC" "${ICLIO_internal_dependencies}" "${ICLIO_external_dependencies}")
	icl_create_pkg_config_file2("ICLFilter" "${ICLIO_internal_dependencies}" "${ICLIO_external_dependencies}")
	icl_create_pkg_config_file2("ICLBlob" "${ICLIO_internal_dependencies}" "${ICLIO_external_dependencies}")
	if(${HAVE_OPENCV_COND})
		icl_create_pkg_config_file2("ICLOpenCV" "${ICLIO_internal_dependencies}" "${ICLIO_external_dependencies}")
	endif()	
	icl_create_pkg_config_file2("ICLIO" "${ICLIO_internal_dependencies}" "${ICLIO_external_dependencies}")
	if(${HAVE_Qt_COND})
		icl_create_pkg_config_file2("ICLQt" "${ICLIO_internal_dependencies}" "${ICLIO_external_dependencies}")
	endif()
	icl_create_pkg_config_file2("ICLQuick" "${ICLIO_internal_dependencies}" "${ICLIO_external_dependencies}")
	icl_create_pkg_config_file2("ICLGeom" "${ICLIO_internal_dependencies}" "${ICLIO_external_dependencies}")
	icl_create_pkg_config_file2("ICLAlgorithms" "${ICLIO_internal_dependencies}" "${ICLIO_external_dependencies}")

	set(ICL_SUB_PACKAGE "ICL")
	set(REQUIRE "ICLUtils ICLCore ICLIO ICLCC ICLBlob ICLFilter ICLOpenCV ICLQuick ICLGeom ICLAlgorithms ICLQt ICLOpenCV")
	set(ICL_PACKAGE_DESCRIPTION "Image Component Library (ICL)")
	configure_file(pkg.in ${CMAKE_CURRENT_BINARY_DIR}/icl.pc @ONLY)
	install(FILES "${CMAKE_CURRENT_BINARY_DIR}/icl.pc" DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig/)
endif()
