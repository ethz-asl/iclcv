// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RSBImage.proto

#ifndef PROTOBUF_RSBImage_2eproto__INCLUDED
#define PROTOBUF_RSBImage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace icl {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RSBImage_2eproto();
void protobuf_AssignDesc_RSBImage_2eproto();
void protobuf_ShutdownFile_RSBImage_2eproto();

class RSBImage;

enum RSBImage_Format {
  RSBImage_Format_formatGray = 0,
  RSBImage_Format_formatRGB = 1,
  RSBImage_Format_formatHLS = 2,
  RSBImage_Format_formatYUV = 3,
  RSBImage_Format_formatLAB = 4,
  RSBImage_Format_formatChroma = 5,
  RSBImage_Format_formatMatrix = 6
};
bool RSBImage_Format_IsValid(int value);
const RSBImage_Format RSBImage_Format_Format_MIN = RSBImage_Format_formatGray;
const RSBImage_Format RSBImage_Format_Format_MAX = RSBImage_Format_formatMatrix;
const int RSBImage_Format_Format_ARRAYSIZE = RSBImage_Format_Format_MAX + 1;

const ::google::protobuf::EnumDescriptor* RSBImage_Format_descriptor();
inline const ::std::string& RSBImage_Format_Name(RSBImage_Format value) {
  return ::google::protobuf::internal::NameOfEnum(
    RSBImage_Format_descriptor(), value);
}
inline bool RSBImage_Format_Parse(
    const ::std::string& name, RSBImage_Format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RSBImage_Format>(
    RSBImage_Format_descriptor(), name, value);
}
// ===================================================================

class RSBImage : public ::google::protobuf::Message {
 public:
  RSBImage();
  virtual ~RSBImage();
  
  RSBImage(const RSBImage& from);
  
  inline RSBImage& operator=(const RSBImage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RSBImage& default_instance();
  
  void Swap(RSBImage* other);
  
  // implements Message ----------------------------------------------
  
  RSBImage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RSBImage& from);
  void MergeFrom(const RSBImage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef RSBImage_Format Format;
  static const Format formatGray = RSBImage_Format_formatGray;
  static const Format formatRGB = RSBImage_Format_formatRGB;
  static const Format formatHLS = RSBImage_Format_formatHLS;
  static const Format formatYUV = RSBImage_Format_formatYUV;
  static const Format formatLAB = RSBImage_Format_formatLAB;
  static const Format formatChroma = RSBImage_Format_formatChroma;
  static const Format formatMatrix = RSBImage_Format_formatMatrix;
  static inline bool Format_IsValid(int value) {
    return RSBImage_Format_IsValid(value);
  }
  static const Format Format_MIN =
    RSBImage_Format_Format_MIN;
  static const Format Format_MAX =
    RSBImage_Format_Format_MAX;
  static const int Format_ARRAYSIZE =
    RSBImage_Format_Format_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Format_descriptor() {
    return RSBImage_Format_descriptor();
  }
  static inline const ::std::string& Format_Name(Format value) {
    return RSBImage_Format_Name(value);
  }
  static inline bool Format_Parse(const ::std::string& name,
      Format* value) {
    return RSBImage_Format_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required uint32 width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);
  
  // required uint32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);
  
  // required uint32 channels = 3;
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 3;
  inline ::google::protobuf::uint32 channels() const;
  inline void set_channels(::google::protobuf::uint32 value);
  
  // required uint32 roix = 4;
  inline bool has_roix() const;
  inline void clear_roix();
  static const int kRoixFieldNumber = 4;
  inline ::google::protobuf::uint32 roix() const;
  inline void set_roix(::google::protobuf::uint32 value);
  
  // required uint32 roiy = 5;
  inline bool has_roiy() const;
  inline void clear_roiy();
  static const int kRoiyFieldNumber = 5;
  inline ::google::protobuf::uint32 roiy() const;
  inline void set_roiy(::google::protobuf::uint32 value);
  
  // required uint32 roiw = 6;
  inline bool has_roiw() const;
  inline void clear_roiw();
  static const int kRoiwFieldNumber = 6;
  inline ::google::protobuf::uint32 roiw() const;
  inline void set_roiw(::google::protobuf::uint32 value);
  
  // required uint32 roih = 7;
  inline bool has_roih() const;
  inline void clear_roih();
  static const int kRoihFieldNumber = 7;
  inline ::google::protobuf::uint32 roih() const;
  inline void set_roih(::google::protobuf::uint32 value);
  
  // required .icl.RSBImage.Format format = 8;
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 8;
  inline ::icl::RSBImage_Format format() const;
  inline void set_format(::icl::RSBImage_Format value);
  
  // required int64 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // required string compressionMode = 10;
  inline bool has_compressionmode() const;
  inline void clear_compressionmode();
  static const int kCompressionModeFieldNumber = 10;
  inline const ::std::string& compressionmode() const;
  inline void set_compressionmode(const ::std::string& value);
  inline void set_compressionmode(const char* value);
  inline void set_compressionmode(const char* value, size_t size);
  inline ::std::string* mutable_compressionmode();
  inline ::std::string* release_compressionmode();
  
  // required string compressionQuality = 11;
  inline bool has_compressionquality() const;
  inline void clear_compressionquality();
  static const int kCompressionQualityFieldNumber = 11;
  inline const ::std::string& compressionquality() const;
  inline void set_compressionquality(const ::std::string& value);
  inline void set_compressionquality(const char* value);
  inline void set_compressionquality(const char* value, size_t size);
  inline ::std::string* mutable_compressionquality();
  inline ::std::string* release_compressionquality();
  
  // required bytes data = 12;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 12;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // optional string metadata = 13;
  inline bool has_metadata() const;
  inline void clear_metadata();
  static const int kMetadataFieldNumber = 13;
  inline const ::std::string& metadata() const;
  inline void set_metadata(const ::std::string& value);
  inline void set_metadata(const char* value);
  inline void set_metadata(const char* value, size_t size);
  inline ::std::string* mutable_metadata();
  inline ::std::string* release_metadata();
  
  // @@protoc_insertion_point(class_scope:icl.RSBImage)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_roix();
  inline void clear_has_roix();
  inline void set_has_roiy();
  inline void clear_has_roiy();
  inline void set_has_roiw();
  inline void clear_has_roiw();
  inline void set_has_roih();
  inline void clear_has_roih();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_compressionmode();
  inline void clear_has_compressionmode();
  inline void set_has_compressionquality();
  inline void clear_has_compressionquality();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_metadata();
  inline void clear_has_metadata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 channels_;
  ::google::protobuf::uint32 roix_;
  ::google::protobuf::uint32 roiy_;
  ::google::protobuf::uint32 roiw_;
  ::google::protobuf::uint32 roih_;
  int format_;
  ::google::protobuf::int64 time_;
  ::std::string* compressionmode_;
  ::std::string* compressionquality_;
  ::std::string* data_;
  ::std::string* metadata_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_RSBImage_2eproto();
  friend void protobuf_AssignDesc_RSBImage_2eproto();
  friend void protobuf_ShutdownFile_RSBImage_2eproto();
  
  void InitAsDefaultInstance();
  static RSBImage* default_instance_;
};
// ===================================================================


// ===================================================================

// RSBImage

// required uint32 width = 1;
inline bool RSBImage::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RSBImage::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RSBImage::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RSBImage::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 RSBImage::width() const {
  return width_;
}
inline void RSBImage::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
}

// required uint32 height = 2;
inline bool RSBImage::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RSBImage::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RSBImage::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RSBImage::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 RSBImage::height() const {
  return height_;
}
inline void RSBImage::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
}

// required uint32 channels = 3;
inline bool RSBImage::has_channels() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RSBImage::set_has_channels() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RSBImage::clear_has_channels() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RSBImage::clear_channels() {
  channels_ = 0u;
  clear_has_channels();
}
inline ::google::protobuf::uint32 RSBImage::channels() const {
  return channels_;
}
inline void RSBImage::set_channels(::google::protobuf::uint32 value) {
  set_has_channels();
  channels_ = value;
}

// required uint32 roix = 4;
inline bool RSBImage::has_roix() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RSBImage::set_has_roix() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RSBImage::clear_has_roix() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RSBImage::clear_roix() {
  roix_ = 0u;
  clear_has_roix();
}
inline ::google::protobuf::uint32 RSBImage::roix() const {
  return roix_;
}
inline void RSBImage::set_roix(::google::protobuf::uint32 value) {
  set_has_roix();
  roix_ = value;
}

// required uint32 roiy = 5;
inline bool RSBImage::has_roiy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RSBImage::set_has_roiy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RSBImage::clear_has_roiy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RSBImage::clear_roiy() {
  roiy_ = 0u;
  clear_has_roiy();
}
inline ::google::protobuf::uint32 RSBImage::roiy() const {
  return roiy_;
}
inline void RSBImage::set_roiy(::google::protobuf::uint32 value) {
  set_has_roiy();
  roiy_ = value;
}

// required uint32 roiw = 6;
inline bool RSBImage::has_roiw() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RSBImage::set_has_roiw() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RSBImage::clear_has_roiw() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RSBImage::clear_roiw() {
  roiw_ = 0u;
  clear_has_roiw();
}
inline ::google::protobuf::uint32 RSBImage::roiw() const {
  return roiw_;
}
inline void RSBImage::set_roiw(::google::protobuf::uint32 value) {
  set_has_roiw();
  roiw_ = value;
}

// required uint32 roih = 7;
inline bool RSBImage::has_roih() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RSBImage::set_has_roih() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RSBImage::clear_has_roih() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RSBImage::clear_roih() {
  roih_ = 0u;
  clear_has_roih();
}
inline ::google::protobuf::uint32 RSBImage::roih() const {
  return roih_;
}
inline void RSBImage::set_roih(::google::protobuf::uint32 value) {
  set_has_roih();
  roih_ = value;
}

// required .icl.RSBImage.Format format = 8;
inline bool RSBImage::has_format() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RSBImage::set_has_format() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RSBImage::clear_has_format() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RSBImage::clear_format() {
  format_ = 0;
  clear_has_format();
}
inline ::icl::RSBImage_Format RSBImage::format() const {
  return static_cast< ::icl::RSBImage_Format >(format_);
}
inline void RSBImage::set_format(::icl::RSBImage_Format value) {
  GOOGLE_DCHECK(::icl::RSBImage_Format_IsValid(value));
  set_has_format();
  format_ = value;
}

// required int64 time = 9;
inline bool RSBImage::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RSBImage::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RSBImage::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RSBImage::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 RSBImage::time() const {
  return time_;
}
inline void RSBImage::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// required string compressionMode = 10;
inline bool RSBImage::has_compressionmode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RSBImage::set_has_compressionmode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RSBImage::clear_has_compressionmode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RSBImage::clear_compressionmode() {
  if (compressionmode_ != &::google::protobuf::internal::kEmptyString) {
    compressionmode_->clear();
  }
  clear_has_compressionmode();
}
inline const ::std::string& RSBImage::compressionmode() const {
  return *compressionmode_;
}
inline void RSBImage::set_compressionmode(const ::std::string& value) {
  set_has_compressionmode();
  if (compressionmode_ == &::google::protobuf::internal::kEmptyString) {
    compressionmode_ = new ::std::string;
  }
  compressionmode_->assign(value);
}
inline void RSBImage::set_compressionmode(const char* value) {
  set_has_compressionmode();
  if (compressionmode_ == &::google::protobuf::internal::kEmptyString) {
    compressionmode_ = new ::std::string;
  }
  compressionmode_->assign(value);
}
inline void RSBImage::set_compressionmode(const char* value, size_t size) {
  set_has_compressionmode();
  if (compressionmode_ == &::google::protobuf::internal::kEmptyString) {
    compressionmode_ = new ::std::string;
  }
  compressionmode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RSBImage::mutable_compressionmode() {
  set_has_compressionmode();
  if (compressionmode_ == &::google::protobuf::internal::kEmptyString) {
    compressionmode_ = new ::std::string;
  }
  return compressionmode_;
}
inline ::std::string* RSBImage::release_compressionmode() {
  clear_has_compressionmode();
  if (compressionmode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = compressionmode_;
    compressionmode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string compressionQuality = 11;
inline bool RSBImage::has_compressionquality() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RSBImage::set_has_compressionquality() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RSBImage::clear_has_compressionquality() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RSBImage::clear_compressionquality() {
  if (compressionquality_ != &::google::protobuf::internal::kEmptyString) {
    compressionquality_->clear();
  }
  clear_has_compressionquality();
}
inline const ::std::string& RSBImage::compressionquality() const {
  return *compressionquality_;
}
inline void RSBImage::set_compressionquality(const ::std::string& value) {
  set_has_compressionquality();
  if (compressionquality_ == &::google::protobuf::internal::kEmptyString) {
    compressionquality_ = new ::std::string;
  }
  compressionquality_->assign(value);
}
inline void RSBImage::set_compressionquality(const char* value) {
  set_has_compressionquality();
  if (compressionquality_ == &::google::protobuf::internal::kEmptyString) {
    compressionquality_ = new ::std::string;
  }
  compressionquality_->assign(value);
}
inline void RSBImage::set_compressionquality(const char* value, size_t size) {
  set_has_compressionquality();
  if (compressionquality_ == &::google::protobuf::internal::kEmptyString) {
    compressionquality_ = new ::std::string;
  }
  compressionquality_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RSBImage::mutable_compressionquality() {
  set_has_compressionquality();
  if (compressionquality_ == &::google::protobuf::internal::kEmptyString) {
    compressionquality_ = new ::std::string;
  }
  return compressionquality_;
}
inline ::std::string* RSBImage::release_compressionquality() {
  clear_has_compressionquality();
  if (compressionquality_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = compressionquality_;
    compressionquality_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes data = 12;
inline bool RSBImage::has_data() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RSBImage::set_has_data() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RSBImage::clear_has_data() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RSBImage::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& RSBImage::data() const {
  return *data_;
}
inline void RSBImage::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void RSBImage::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void RSBImage::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RSBImage::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* RSBImage::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string metadata = 13;
inline bool RSBImage::has_metadata() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RSBImage::set_has_metadata() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RSBImage::clear_has_metadata() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RSBImage::clear_metadata() {
  if (metadata_ != &::google::protobuf::internal::kEmptyString) {
    metadata_->clear();
  }
  clear_has_metadata();
}
inline const ::std::string& RSBImage::metadata() const {
  return *metadata_;
}
inline void RSBImage::set_metadata(const ::std::string& value) {
  set_has_metadata();
  if (metadata_ == &::google::protobuf::internal::kEmptyString) {
    metadata_ = new ::std::string;
  }
  metadata_->assign(value);
}
inline void RSBImage::set_metadata(const char* value) {
  set_has_metadata();
  if (metadata_ == &::google::protobuf::internal::kEmptyString) {
    metadata_ = new ::std::string;
  }
  metadata_->assign(value);
}
inline void RSBImage::set_metadata(const char* value, size_t size) {
  set_has_metadata();
  if (metadata_ == &::google::protobuf::internal::kEmptyString) {
    metadata_ = new ::std::string;
  }
  metadata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RSBImage::mutable_metadata() {
  set_has_metadata();
  if (metadata_ == &::google::protobuf::internal::kEmptyString) {
    metadata_ = new ::std::string;
  }
  return metadata_;
}
inline ::std::string* RSBImage::release_metadata() {
  clear_has_metadata();
  if (metadata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = metadata_;
    metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace icl

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::icl::RSBImage_Format>() {
  return ::icl::RSBImage_Format_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RSBImage_2eproto__INCLUDED
