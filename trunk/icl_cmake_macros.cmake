include(CheckIncludeFile)
message(STATUS "macros found")

macro(icl_check_external_package ID FFILE REL_LIB_DIR REL_INC_DIR DEFAULT_PATH DEFINE_COND)
  set(${DEFINE_COND} FALSE)
  message(STATUS "-- checking package ${ID} --")
  message(STATUS "searching for ${FFILE}")# in ${DEFAULT_PATH}/${REL_INC_DIR}")# and ${${ID}_PATH}/${REL_INC_DIR}")
  find_path(ICL_XDEP_${ID}_PATH "${REL_INC_DIR}" PATHS "${DEFAULT_PATH}" "${${ID}_PATH}" DOC "The path to ${ID}" NO_DEFAULT_PATH)
if(EXISTS ${ICL_XDEP_${ID}_PATH}/${REL_INC_DIR})
	#message(STATUS "found path: ${${ID}_PATH}")    
	if(EXISTS ${ICL_XDEP_${ID}_PATH}/${REL_INC_DIR}/${FFILE})
		message(STATUS "${ICL_XDEP_${ID}_PATH}/${REL_INC_DIR}/${FFILE}")
		message(STATUS "${ID} detected: TRUE")
		if(${ICL_XDEP_${ID}_ON} OR ${ICL_XDEP_ALL_ON})
			
        	set(${ID}_LIB_PATH "${ICL_XDEP_${ID}_PATH}/${REL_LIB_DIR}")
        	set(${ID}_INCLUDE_PATH "${ICL_XDEP_${ID}_PATH}/${REL_INC_DIR}")		
			message(STATUS "include: ${${ID}_INCLUDE_PATH}")        	
			set(ICL_XDEP_${ID}_ON ON CACHE BOOL "Use ${ID} when available" FORCE)
        	set(${DEFINE_COND} TRUE)
        	add_definitions( -DHAVE_${ID})
			message(STATUS "${ICL_XDEP_${ID}_PATH}/${REL_INC_DIR}")
			message(STATUS "${ICL_XDEP_${ID}_PATH}/${REL_INC_DIR}")			
			include_directories(${ICL_XDEP_${ID}_PATH}/${REL_INC_DIR})
        	link_directories(${ICL_XDEP_${ID}_PATH}/${REL_LIB_DIR})
      	else()
        	set(${DEFINE_COND} FALSE)
      	endif()
	else()
		message(STATUS "File ${FFILE} not found in ${ICL_XDEP_${ID}_PATH}")
    endif()

else()
	find_path(ICL_XDEP_${ID}_PATH "${FFILE}" PATHS "ICL_XDEP_${ID}_PATH-NOTFOUND" #"${ICL_XDEP_${ID}_PATH}/${REL_INC_DIR}"
    DOC "The path to ${ID}" NO_DEFAULT_PATH)
	message(STATUS "Path ${ICL_XDEP_${ID}_PATH} not found")
	set(${DEFINE_COND} FALSE)
    set(ICL_XDEP_${ID}_ON OFF CACHE BOOL "Use ${ID} when available" FORCE)
	message(STATUS "${ID} detected: FALSE")
endif()
  
endmacro()


macro(add_internal_dependencies DEPLIST dependencies)
  foreach(DEPENDENCY ${${DEPLIST}})
    add_internal_dependencies(${DEPENDENCY}_internal_dependencies ${dependencies})	
  endforeach()
  foreach(DEPENDENCY ${${DEPLIST}})
    set(${dependencies} "${DEPENDENCY};${${dependencies}}")	
  endforeach()
  list(LENGTH ${dependencies} listsize)
  if(${listsize} GREATER 1)
    list(REMOVE_DUPLICATES ${dependencies})
  endif()
endmacro()

macro(add_external_dependencies DEPLIST dependencies)
  foreach(DEPENDENCY ${${DEPLIST}})
    if(HAVE_${DEPENDENCY}_COND)
      set(${dependencies} "${${DEPENDENCY}_LIBS_l};${${dependencies}}")
    endif()
  endforeach()
endmacro()

macro(add_libsource PROJECT_NAME FILE CONDITIONLIST LIBSOURCES)
  set(COND TRUE)	
  foreach(CONDITION ${CONDITIONLIST})	
    if(NOT ${CONDITION})
      set(COND FALSE)
    endif()
  endforeach()
  if(${COND})
    set(${LIBSOURCES} "${${LIBSOURCES}};${FILE}")	
  endif()
endmacro()

macro(add_example PROJECT_N FILE CONDITIONLIST ICLLibsToLinkAgainst)
  set(COND TRUE)	
  foreach(CONDITION ${CONDITIONLIST})
    if(NOT ${CONDITION})
      set(COND FALSE)
    endif()
  endforeach()
  if(${COND})
    add_executable(icl-${FILE} examples/${FILE}.cpp)
    target_link_libraries(icl-${FILE} ${${ICLLibsToLinkAgainst}})
    install (TARGETS icl-${FILE} RUNTIME DESTINATION bin)
  endif()
endmacro()

#TODO irgendwas muss noch mit dem parameter FILE passieren
macro(add_gtest PROJECT_N FILE CONDITIONLIST ICLLibsToLinkAgainst)
  set(COND TRUE)	
  foreach(CONDITION ${CONDITIONLIST})
    if(NOT ${CONDITION})
      set(COND FALSE)
    endif()
  endforeach()
  if(${COND})
	add_custom_target(check 
		COMMAND 
		g++ -O0 -L${GTEST_LIB_PATH} -l${${ICLLibsToLinkAgainst}} -I${GTEST_INCLUDE_PATH} "${FILE}" runner.cpp -o icl-test-${FILE}
		COMMAND ./icl-test-${FILE}
		WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/${PROJECT_N}/test
	)
  endif()
endmacro()

macro(add_doc_gen PROJECT_NAME)
  if(DOXYGEN_FOUND)
    add_custom_target(doc doxygen doc/doxyfile)
    install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doc/html/
      DESTINATION ${CMAKE_INSTALL_PREFIX}/doc/${PROJECT_NAME}
      )
    install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doc/
      DESTINATION ${CMAKE_INSTALL_PREFIX}/doc/${PROJECT_NAME}
      PATTERN "doxyfile" EXCLUDE
	REGEX .svn* EXCLUDE
      )
    set_property(DIRECTORY APPEND PROPERTY ADDITIONAL_MAKE_CLEAN_FILES doc/html/.)
  endif()
endmacro()


macro(icl_create_pkg_config_file2 ICL_SUB_PACKAGE_PLACEHOLDER REQUIRE_INTERNAL REQUIRE_EXTERNAL)
  set(ICL_SUB_PACKAGE "${ICL_SUB_PACKAGE_PLACEHOLDER}")
  set(REQUIRE "")
  set(OPTIONAL_INCLUDES "") 
  set(OPTIONAL_LIBS "")

  foreach(TEMP ${REQUIRE_INTERNAL})
    set(REQUIRE "${REQUIRE} ${TEMP}")
  endforeach()
  #message(STATUS "reqin: ${REQUIRE_INTERNAL}")
  foreach(REQ ${REQUIRE_EXTERNAL})
	    
	if(${HAVE_${REQ}_COND})
      #message(STATUS "have ${REQ}")
      set(OPTIONAL_INCLUDES "${OPTIONAL_INCLUDES} -I${${REQ}_INCLUDE_PATH} -DHAVE_${REQ}")
      set(OPTIONAL_LIBS "${OPTIONAL_LIBS} -L${${REQ}_LIB_PATH}")
	  #message(STATUS ${${REQ}_LIB_PATH})
      foreach(LIBRARY ${${REQ}_LIBS_l})
	set(OPTIONAL_LIBS "${OPTIONAL_LIBS} -l${LIBRARY}")
      endforeach()
      set(OPTIONAL_LIBS "${OPTIONAL_LIBS} -Wl,-rpath -Wl,${${REQ}_LIB_PATH}")
    endif()
  endforeach()
  set(ICL_PACKAGE_DESCRIPTION "ICL's ${ICL_SUB_PACKAGE_PLACEHOLDER} package")
  set(LIBS "-L\${libdir} -l${ICL_SUB_PACKAGE_PLACEHOLDER} '-Wl,-rpath -Wl,\${libdir} ${OPTIONAL_LIBS}'")
  set(INCLUDES "-I\${includedir}/ICL ${OPTIONAL_INCLUDES}")
  configure_file(pkg.in ${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc @ONLY)
  install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc" DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig/)
  set(${OPTIONAL_INCLUDES} "")
  set(${OPTIONAL_LIBS} "")
endmacro()


macro(icl_create_pkg_config_file_if PACKAGE CONDITION)
  if("${CONDITION}" STREQUAL  "TRUE")
    message(STATUS "creating ${PACKAGE}.pc")
    icl_create_pkg_config_file2("${PACKAGE}" "${${PACKAGE}_internal_dependencies}" "${${PACKAGE}_external_dependencies}")
  else()
    message(STATUS "skipped creation of ${PACKAGE}.pc")
  endif()
endmacro()

macro(icl_define_variables_from_pkg_config PACKAGE PGK_CONFIG_LIST)
   	set(ALL_FOUND TRUE)
	set(PKG_ALL_LIBS_l "")
	set(PKG_ALL_LIBS_L "")
    set(PKG_ALL_LIBS_OTHER "")
	set(PKG_ALL_CFLAGS_I "")
	set(PKG_ALL_CFLAGS_OTHER "")

	foreach(pkg ${PKG_CONFIG_LIST})
        pkg_check_modules(${pkg}_PKG ${pkg})
		if(NOT ${${pkg}_PKG_FOUND})
    		set(ALL_FOUND FALSE)
			set(HAVE_${PACKAGE}_COND FALSE)
			message(STATUS "package config file ${pkg}.pc not found -> ICLPackage ${PACKAGE} disabled")
			break()
		else()
			set(PKG_ALL_LIBS_l "${PKG_ALL_LIBS_l} ${${PACKAGE}_PKG_LIBRARIES}")
            set(PKG_ALL_LIBS_L "${PKG_ALL_LIBS_L} ${${PACKAGE}_PKG_LIBRARY_DIRS}")
            set(PKG_ALL_LIBS_OTHER "${PKG_ALL_LIBS_OTHER} ${${PACKAGE}_PKG_LDFLAGS_OTHER}")
			set(PKG_ALL_CFLAGS_I "${PKG_ALL_CFLAGS_I} ${${PACKAGE}_PKG_INCLUDE_DIRS}")
			set(PKG_ALL_CFLAGS_OTHER "${PKG_ALL_CFLAGS_OTHER} ${${PACKAGE}_PKG_CFLAGS_OTHER}")
		endif()
    endforeach()
	if(${ALL_FOUND})
		set(${PACKAGE}_LIBS_l "${PKG_ALL_LIBS_l}")
		list(LENGTH ${PACKAGE}_LIBS_l listsize)
		if(${listsize} GREATER 1)
			list(REMOVE_DUPLICATES ${PACKAGE}_LIBS_l)
			list(REMOVE_ITEM ${PACKAGE}_LIBS_l pthread)
		endif()
		set(${PACKAGE}_LIBS_L "${PKG_ALL_LIBS_L}")
		set(${PACKAGE}_LIBS_l "${PKG_ALL_LIBS_l}")
        set(${PACKAGE}_LIBS_OTHER "${PKG_ALL_LIBS_OTHER}")
        set(${PACKAGE}_CFLAGS_I "${PKG_ALL_CFLAGS_I}")
        set(${PACKAGE}_CFLAGS_OTHER "${PKG_ALL_CFLAGS_OTHER}")
	endif()		
endmacro()
