message(STATUS "macros found")
macro(icl_check_external_package ID FFILE REL_LIB_DIR REL_INC_DIR DEFAULT_PATH DEFINE_COND)
	set(${DEFINE_COND} FALSE)
	message(STATUS "default ${DEFAULT_PATH}")
	set(LOADER_PATH LD_LIBRARY_PATH)
	find_path(${ID}_PATH "${FFILE}" PATHS "${DEFAULT_PATH}/${REL_INC_DIR}" "${${ID}_PATH}/${REL_INC_DIR}" ENV LOADER_PATH
 DOC "The path to ${ID}")
message(STATUS "current: ${${ID}_PATH}")
file(GLOB ${ID}_HDRS "${${ID}_PATH}")#/${REL_INC_DIR}")
	message(STATUS "afterglob: ${${ID}_HDRS}  def: ${DEFAULT_PATH}/${REL_INC_DIR}")
	message(STATUS "check: ${${ID}_PATH}  ${DEFAULT_PATH}/${REL_INC_DIR}")
string(REPLACE "/${REL_INC_DIR}" "" ${ID}_PATH ${${ID}_PATH})
#string(REGEX REPLACE "${REL_INC_DIR}" "" ${ID}_PATH ${ID}_PATH)
#set(strlen 0)
#set(strlen1 0)
#string(LENGTH ${REL_INC_DIR} strlen)
#string(LENGTH ${${ID}_PATH} strlen1)
#message(STATUS "ll: ${strlen} ${strlen1}") 
 # string(SUBSTRING ${${ID}_PATH} 1 strlen ${ID}_PATHE)

message(STATUS "check: ${${ID}_PATH}")
 if(${ID}_HDRS)
	#if(${${ID}_PATH} STREQUAL "${DEFAULT_PATH}/${REL_INC_DIR}")
		#set(${ID}_PATH "${DEFAULT_PATH}")
		message(STATUS "oknnn ${${ID}_PATH}")	
	else()
		message(STATUS "not good: ${${ID}_PATH} ${DEFAULT_PATH}/${REL_INC_DIR}")
		set(${ID}_PATH FALSE)
	endif()
	message(STATUS "depp: ${USE_${ID}} ${ALL_ON} ${${ID}_PATH} ${${DEFAULT_PATH}}")	
	#if("${${ID}_PATH}" STREQUAL "${DEFAULT_PATH}")
	if(${ID}_PATH AND ${ID}_HDRS)
		#set(${ID}_PATH "${DEFAULT_PATH}")
		message(STATUS "passed")
	    if(${USE_${ID}} OR ${ALL_ON})
		set(${ID}_LIB_PATH "${${ID}_PATH}/${REL_LIB_DIR}")
		set(${ID}_INCLUDE_PATH "${${ID}_PATH}/${REL_INC_DIR}")		
		set(USE_${ID} ON CACHE BOOL "Use ${ID} when available" FORCE)
		set(${DEFINE_COND} TRUE)
		add_definitions( -DHAVE_${ID})
		include_directories(${${ID}_PATH}/${REL_INC_DIR})
		link_directories(${${ID}_PATH}/${REL_LIB_DIR})
		#include_directories(${DEFAULT_PATH}/${REL_INC_DIR})
		#link_directories(${DEFAULT_PATH}/${REL_LIB_DIR})
	    else()
		set(${DEFINE_COND} FALSE)
	    endif()	
	else()
	    set(${DEFINE_COND} FALSE)
	    set(USE_${ID} OFF CACHE BOOL "Use ${ID} when available")
	endif()
	message(STATUS "${ID} detected: ${${DEFINE_COND}}")   
endmacro()


macro(add_internal_dependencies DEPLIST dependencies)
	#message(STATUS "depp: ${${DEPLIST}}")
	foreach(DEPENDENCY ${${DEPLIST}})
		#message(STATUS "look for ${DEPENDENCY}_internal_dependencies")		
		add_internal_dependencies(${DEPENDENCY}_internal_dependencies ${dependencies})	
	endforeach()
	#message(STATUS "de: ${${dependencies}}")	
	foreach(DEPENDENCY ${${DEPLIST}})
		set(${dependencies} "${DEPENDENCY};${${dependencies}}")	
	endforeach()
	#set(templist ${${dependencies}})
	list(LENGTH ${dependencies} listsize)
	if(${listsize} GREATER 1)
		#message(STATUS "removing")	
		list(REMOVE_DUPLICATES ${dependencies})
	endif()
endmacro()

macro(add_external_dependencies DEPLIST dependencies)
	foreach(DEPENDENCY ${${DEPLIST}})
		if(HAVE_${DEPENDENCY}_COND)
			set(${dependencies} "${${DEPENDENCY}_LIBS_l};${${dependencies}}")
	    endif()
	endforeach()
endmacro()

macro(add_libsource PROJECT_NAME FILE CONDITIONLIST LIBSOURCES)
	set(COND TRUE)	
	foreach(CONDITION ${CONDITIONLIST})	
		if(NOT ${CONDITION})
			set(COND FALSE)
		endif()
	endforeach()
	if(${COND})
		set(${LIBSOURCES} "${${LIBSOURCES}};${FILE}")
		#message(STATUS "added ${FILE} to ${PROJECT_NAME} sources.")		
	endif() 
	#message(STATUS "ddd:${${LIBSOURCES}}")  
endmacro()

macro(add_example PROJECT_NAME FILE CONDITIONLIST ICLLibsToLinkAgainst)
	set(COND TRUE)	
	foreach(CONDITION ${CONDITIONLIST})
		if(NOT ${CONDITION})
			set(COND FALSE)
		endif()
	endforeach()
	if(${COND})
		add_executable(icl-${FILE} examples/${FILE}.cpp)
		target_link_libraries(icl-${FILE} ${${ICLLibsToLinkAgainst}})
		install (TARGETS icl-${FILE} RUNTIME DESTINATION bin)
		#message(STATUS "added ${FILE} to ${PROJECT_NAME} examples.")
	endif()
endmacro()

macro(add_doc_gen PROJECT_NAME)
	if(DOXYGEN_FOUND)
		add_custom_target(doc doxygen doc/doxyfile)
		install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doc/html/
         		DESTINATION ${CMAKE_INSTALL_PREFIX}/doc/${PROJECT_NAME}
		)
		install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doc/
			DESTINATION ${CMAKE_INSTALL_PREFIX}/doc/${PROJECT_NAME}
			PATTERN "doxyfile" EXCLUDE
		)
		set_property(DIRECTORY APPEND PROPERTY ADDITIONAL_MAKE_CLEAN_FILES doc/html)
	endif()
endmacro()

#write pkg config files
macro(icl_create_pkg_config_file ICL_SUB_PACKAGE_PLACEHOLDER REQUIRE OPTIONAL_INCLUDES OPTIONAL_LIBS)
	set(ICL_PACKAGE_DESCRIPTION "ICL's ${ICL_SUB_PACKAGE_PLACEHOLDER} package")
	set(LIBS "-L\${exec_prefix}/lib -l${ICL_SUB_PACKAGE_PLACEHOLDER} '-Wl,-rpath -Wl,\${exec_prefix}/lib ${${OPTIONAL_LIBS}}'")
	set(INCLUDES "-I\${prefix}/include/ICL ${${OPTIONAL_INCLUDES}}")
	configure_file(pkg.in ${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc @ONLY)
	install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc" DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig/)
	set(${OPTIONAL_INCLUDES} "")
	set(${OPTIONAL_LIBS} "")
endmacro()
#

macro(icl_create_pkg_config_file2 ICL_SUB_PACKAGE_PLACEHOLDER REQUIRE_INTERNAL REQUIRE_EXTERNAL)
set(ICL_SUB_PACKAGE "${ICL_SUB_PACKAGE_PLACEHOLDER}")
set(REQUIRE "")
set(OPTIONAL_INCLUDES "") 
set(OPTIONAL_LIBS "")

foreach(TEMP ${REQUIRE_INTERNAL})
    set(REQUIRE "${REQUIRE} ${TEMP}")
endforeach()
#message(STATUS "reqin: ${REQUIRE_INTERNAL}")
foreach(REQ ${REQUIRE_EXTERNAL})
	if(${HAVE_${REQ}_COND})
		set(OPTIONAL_INCLUDES "${OPTIONAL_INCLUDES} -I${${REQ}_INCLUDE_PATH} -DHAVE_${REQ}")
		set(OPTIONAL_LIBS "${OPTIONAL_LIBS} -L${${REQ}_LIB_PATH}")
		foreach(LIBRARY ${${REQ}_LIBS_l})
			set(OPTIONAL_LIBS "${OPTIONAL_LIBS} -l${LIBRARY}")
		endforeach()
		set(OPTIONAL_LIBS "${OPTIONAL_LIBS} -Wl,-rpath -Wl,${${REQ}_LIB_PATH}")
	endif()
endforeach()
	set(ICL_PACKAGE_DESCRIPTION "ICL's ${ICL_SUB_PACKAGE_PLACEHOLDER} package")
	set(LIBS "-L\${libdir} -l${ICL_SUB_PACKAGE_PLACEHOLDER} '-Wl,-rpath -Wl,\${libdir} ${OPTIONAL_LIBS}'")
	set(INCLUDES "-I\${includedir}/ICL ${OPTIONAL_INCLUDES}")
	configure_file(pkg.in ${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc @ONLY)
	install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${ICL_SUB_PACKAGE_PLACEHOLDER}.pc" DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig/)
	set(${OPTIONAL_INCLUDES} "")
	set(${OPTIONAL_LIBS} "")
endmacro()

